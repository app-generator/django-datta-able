# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ProductsInner1PickupCapabilities(BaseModel):
    """
    ProductsInner1PickupCapabilities
    """ # noqa: E501
    next_business_day: Optional[StrictBool] = Field(default=None, description="This indicator has values of Y or N, and tells the consumer if the service in the response has a pickup date on the same day as the requested shipment date (per the request).", alias="nextBusinessDay")
    local_cutoff_date_and_time: Optional[StrictStr] = Field(default=None, description="This is the cutoff time for the service<BR>                offered in the response. This represents the latest time (local to origin) which the shipment can be tendered to the courier for that service on that day.", alias="localCutoffDateAndTime")
    gmt_cutoff_time: Optional[StrictStr] = Field(default=None, description="Pickup cut off time in GMT", alias="GMTCutoffTime")
    pickup_earliest: Optional[StrictStr] = Field(default=None, description="The DHL earliest time possible for pickup", alias="pickupEarliest")
    pickup_latest: Optional[StrictStr] = Field(default=None, description="The DHL latest time possible for pickup", alias="pickupLatest")
    origin_service_area_code: Optional[StrictStr] = Field(default=None, description="The DHL Service Area Code for the origin of the Shipment", alias="originServiceAreaCode")
    origin_facility_area_code: Optional[StrictStr] = Field(default=None, description="The DHL Facility Code for the Origin", alias="originFacilityAreaCode")
    pickup_additional_days: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is additional transit delays (in days) for shipment picked up from the mentioned city or postal area to arrival at the service area.", alias="pickupAdditionalDays")
    pickup_day_of_week: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Pickup day of the week number", alias="pickupDayOfWeek")
    __properties: ClassVar[List[str]] = ["nextBusinessDay", "localCutoffDateAndTime", "GMTCutoffTime", "pickupEarliest", "pickupLatest", "originServiceAreaCode", "originFacilityAreaCode", "pickupAdditionalDays", "pickupDayOfWeek"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductsInner1PickupCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductsInner1PickupCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextBusinessDay": obj.get("nextBusinessDay"),
            "localCutoffDateAndTime": obj.get("localCutoffDateAndTime"),
            "GMTCutoffTime": obj.get("GMTCutoffTime"),
            "pickupEarliest": obj.get("pickupEarliest"),
            "pickupLatest": obj.get("pickupLatest"),
            "originServiceAreaCode": obj.get("originServiceAreaCode"),
            "originFacilityAreaCode": obj.get("originFacilityAreaCode"),
            "pickupAdditionalDays": obj.get("pickupAdditionalDays"),
            "pickupDayOfWeek": obj.get("pickupDayOfWeek")
        })
        return _obj


