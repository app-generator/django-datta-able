# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.holidays import Holidays
from openapi_client.models.opening_time import OpeningTime
from typing import Optional, Set
from typing_extensions import Self

class OpeningHours(BaseModel):
    """
    Array of openingHours entities, each consisting of week day, opening time and closing time.
    """ # noqa: E501
    opening_hours: List[OpeningTime] = Field(description="Multiple opening hours entities can exist for the same week day.", alias="openingHours")
    holiday_dates: Optional[List[date]] = Field(default=None, description="Holiday details with date", alias="holidayDates")
    holidays_dates: Optional[Dict[str, List[date]]] = Field(default=None, description="Holiday details with date", alias="holidaysDates")
    html: Optional[StrictStr] = Field(default=None, description="Obsolete. This is planned to be removed in future releases.")
    holiday_opening_hours_html: Optional[StrictStr] = Field(default=None, description="Obsolete. This is planned to be removed in future releases.", alias="holidayOpeningHoursHtml")
    holidays: Optional[Holidays] = None
    __properties: ClassVar[List[str]] = ["openingHours", "holidayDates", "holidaysDates", "html", "holidayOpeningHoursHtml", "holidays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpeningHours from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in opening_hours (list)
        _items = []
        if self.opening_hours:
            for _item in self.opening_hours:
                if _item:
                    _items.append(_item.to_dict())
            _dict['openingHours'] = _items
        # override the default output from pydantic by calling `to_dict()` of holidays
        if self.holidays:
            _dict['holidays'] = self.holidays.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpeningHours from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "openingHours": [OpeningTime.from_dict(_item) for _item in obj["openingHours"]] if obj.get("openingHours") is not None else None,
            "holidayDates": obj.get("holidayDates"),
            "holidaysDates": obj.get("holidaysDates"),
            "html": obj.get("html"),
            "holidayOpeningHoursHtml": obj.get("holidayOpeningHoursHtml"),
            "holidays": Holidays.from_dict(obj["holidays"]) if obj.get("holidays") is not None else None
        })
        return _obj


