# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_reference import SupermodelIoLogisticsExpressReference
from openapi_client.models.supermodel_io_logistics_express_tracking_response_shipments_inner_events_inner import SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerEventsInner
from openapi_client.models.supermodel_io_logistics_express_tracking_response_shipments_inner_pieces_inner import SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner
from openapi_client.models.supermodel_io_logistics_express_tracking_response_shipments_inner_receiver_details import SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerReceiverDetails
from openapi_client.models.supermodel_io_logistics_express_tracking_response_shipments_inner_shipper_details import SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerShipperDetails
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressTrackingResponseShipmentsInner(BaseModel):
    """
    SupermodelIoLogisticsExpressTrackingResponseShipmentsInner
    """ # noqa: E501
    shipment_tracking_number: Optional[StrictStr] = Field(default=None, alias="shipmentTrackingNumber")
    status: Optional[StrictStr] = None
    shipment_timestamp: Optional[StrictStr] = Field(default=None, alias="shipmentTimestamp")
    product_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="DHL product code", alias="productCode")
    description: Optional[StrictStr] = None
    shipper_details: Optional[SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerShipperDetails] = Field(default=None, alias="shipperDetails")
    receiver_details: Optional[SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerReceiverDetails] = Field(default=None, alias="receiverDetails")
    total_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalWeight")
    unit_of_measurements: Optional[StrictStr] = Field(default=None, alias="unitOfMeasurements")
    shipper_references: Optional[Annotated[List[SupermodelIoLogisticsExpressReference], Field(max_length=999)]] = Field(default=None, alias="shipperReferences")
    events: List[SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerEventsInner]
    number_of_pieces: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="numberOfPieces")
    pieces: Optional[List[SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner]] = None
    estimated_delivery_date: Optional[StrictStr] = Field(default=None, alias="estimatedDeliveryDate")
    children_shipment_identification_numbers: Optional[List[StrictStr]] = Field(default=None, alias="childrenShipmentIdentificationNumbers")
    controlled_access_data_codes: Optional[List[StrictStr]] = Field(default=None, description="controlled access data codes such as 'SHPR_CTY' for shipper's city, 'CNSGN_CTY' for consignee's city, 'SVP_URL' for service point URL, 'SVP_FAC' for service point facility code and 'SIGN_NM' for signatory name.", alias="controlledAccessDataCodes")
    __properties: ClassVar[List[str]] = ["shipmentTrackingNumber", "status", "shipmentTimestamp", "productCode", "description", "shipperDetails", "receiverDetails", "totalWeight", "unitOfMeasurements", "shipperReferences", "events", "numberOfPieces", "pieces", "estimatedDeliveryDate", "childrenShipmentIdentificationNumbers", "controlledAccessDataCodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressTrackingResponseShipmentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shipper_details
        if self.shipper_details:
            _dict['shipperDetails'] = self.shipper_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver_details
        if self.receiver_details:
            _dict['receiverDetails'] = self.receiver_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipper_references (list)
        _items = []
        if self.shipper_references:
            for _item in self.shipper_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipperReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item in self.events:
                if _item:
                    _items.append(_item.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pieces (list)
        _items = []
        if self.pieces:
            for _item in self.pieces:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pieces'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressTrackingResponseShipmentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shipmentTrackingNumber": obj.get("shipmentTrackingNumber"),
            "status": obj.get("status"),
            "shipmentTimestamp": obj.get("shipmentTimestamp"),
            "productCode": obj.get("productCode"),
            "description": obj.get("description"),
            "shipperDetails": SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerShipperDetails.from_dict(obj["shipperDetails"]) if obj.get("shipperDetails") is not None else None,
            "receiverDetails": SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerReceiverDetails.from_dict(obj["receiverDetails"]) if obj.get("receiverDetails") is not None else None,
            "totalWeight": obj.get("totalWeight"),
            "unitOfMeasurements": obj.get("unitOfMeasurements"),
            "shipperReferences": [SupermodelIoLogisticsExpressReference.from_dict(_item) for _item in obj["shipperReferences"]] if obj.get("shipperReferences") is not None else None,
            "events": [SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerEventsInner.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "numberOfPieces": obj.get("numberOfPieces"),
            "pieces": [SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner.from_dict(_item) for _item in obj["pieces"]] if obj.get("pieces") is not None else None,
            "estimatedDeliveryDate": obj.get("estimatedDeliveryDate"),
            "childrenShipmentIdentificationNumbers": obj.get("childrenShipmentIdentificationNumbers"),
            "controlledAccessDataCodes": obj.get("controlledAccessDataCodes")
        })
        return _obj


