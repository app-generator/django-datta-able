# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chronology import Chronology
from openapi_client.models.date_time_field import DateTimeField
from openapi_client.models.date_time_field_type import DateTimeFieldType
from typing import Optional, Set
from typing_extensions import Self

class LocalTime(BaseModel):
    """
    Array of openingHours entities, each consisting of week day, opening time and closing time.
    """ # noqa: E501
    chronology: Optional[Chronology] = None
    hour_of_day: Optional[StrictInt] = Field(default=None, alias="hourOfDay")
    minute_of_hour: Optional[StrictInt] = Field(default=None, alias="minuteOfHour")
    second_of_minute: Optional[StrictInt] = Field(default=None, alias="secondOfMinute")
    millis_of_second: Optional[StrictInt] = Field(default=None, alias="millisOfSecond")
    millis_of_day: Optional[StrictInt] = Field(default=None, alias="millisOfDay")
    fields: Optional[List[DateTimeField]] = None
    values: Optional[List[StrictInt]] = None
    field_types: Optional[List[DateTimeFieldType]] = Field(default=None, alias="fieldTypes")
    __properties: ClassVar[List[str]] = ["chronology", "hourOfDay", "minuteOfHour", "secondOfMinute", "millisOfSecond", "millisOfDay", "fields", "values", "fieldTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocalTime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chronology
        if self.chronology:
            _dict['chronology'] = self.chronology.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item in self.fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in field_types (list)
        _items = []
        if self.field_types:
            for _item in self.field_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fieldTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocalTime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chronology": Chronology.from_dict(obj["chronology"]) if obj.get("chronology") is not None else None,
            "hourOfDay": obj.get("hourOfDay"),
            "minuteOfHour": obj.get("minuteOfHour"),
            "secondOfMinute": obj.get("secondOfMinute"),
            "millisOfSecond": obj.get("millisOfSecond"),
            "millisOfDay": obj.get("millisOfDay"),
            "fields": [DateTimeField.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "values": obj.get("values"),
            "fieldTypes": [DateTimeFieldType.from_dict(_item) for _item in obj["fieldTypes"]] if obj.get("fieldTypes") is not None else None
        })
        return _obj


