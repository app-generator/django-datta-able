# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_time_field_type import DateTimeFieldType
from openapi_client.models.duration_field import DurationField
from typing import Optional, Set
from typing_extensions import Self

class DateTimeField(BaseModel):
    """
    DateTimeField
    """ # noqa: E501
    name: Optional[StrictStr] = None
    type: Optional[DateTimeFieldType] = None
    supported: Optional[StrictBool] = None
    lenient: Optional[StrictBool] = None
    minimum_value: Optional[StrictInt] = Field(default=None, alias="minimumValue")
    maximum_value: Optional[StrictInt] = Field(default=None, alias="maximumValue")
    duration_field: Optional[DurationField] = Field(default=None, alias="durationField")
    range_duration_field: Optional[DurationField] = Field(default=None, alias="rangeDurationField")
    leap_duration_field: Optional[DurationField] = Field(default=None, alias="leapDurationField")
    __properties: ClassVar[List[str]] = ["name", "type", "supported", "lenient", "minimumValue", "maximumValue", "durationField", "rangeDurationField", "leapDurationField"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DateTimeField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duration_field
        if self.duration_field:
            _dict['durationField'] = self.duration_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range_duration_field
        if self.range_duration_field:
            _dict['rangeDurationField'] = self.range_duration_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leap_duration_field
        if self.leap_duration_field:
            _dict['leapDurationField'] = self.leap_duration_field.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DateTimeField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": DateTimeFieldType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "supported": obj.get("supported"),
            "lenient": obj.get("lenient"),
            "minimumValue": obj.get("minimumValue"),
            "maximumValue": obj.get("maximumValue"),
            "durationField": DurationField.from_dict(obj["durationField"]) if obj.get("durationField") is not None else None,
            "rangeDurationField": DurationField.from_dict(obj["rangeDurationField"]) if obj.get("rangeDurationField") is not None else None,
            "leapDurationField": DurationField.from_dict(obj["leapDurationField"]) if obj.get("leapDurationField") is not None else None
        })
        return _obj


