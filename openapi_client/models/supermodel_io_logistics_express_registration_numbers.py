# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressRegistrationNumbers(BaseModel):
    """
    Should your country require registration numbers, such as VAT, EOR etc., please declare it here
    """ # noqa: E501
    type_code: Annotated[str, Field(min_length=1, strict=True, max_length=3)] = Field(description="VAT, Value-Added tax<BR>      EIN, Employer Identification Number<BR>      GST, Goods and Service Tax<BR>      SSN, Social Security Number<BR>      EOR, European Union Registration and Identification<BR>      DUN, Data Universal Numberin System<BR>      FED, Federal Tax ID<BR>      STA, State Tax ID<BR>      CNP, Brazil CNPJ/CPF Federal Tax<BR>      IE, Brazil type IE/RG Federal Tax<BR>      INN, Russia bank details section INN<BR>      KPP, Russia bank details section KPP<BR>      OGR, Russia bank details section OGRN<BR>      OKP, Russia bank details sectionOKPO<BR>      SDT, Overseas Registered Supplier or Import One-Stop-Shop or GB VAT (foreign) registration or AUSid GST Registration or VAT on E-Commerce<BR>      FTZ, Free Trade Zone ID<BR>      DAN, Deferment Account Duties Only<BR>      TAN, Deferment Account Tax Only<BR>      DTF, Deferment Account Duties, Taxes and Fees Only<BR>      RGP, EU Registered Exporters registration ID<BR>       DLI,Driver's License <BR>      NID,National Identity Card<BR>      ,PAS:Passport<BR>      ,MID:Manufacturer ID", alias="typeCode")
    number: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="Please enter registration number")
    issuer_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2)] = Field(description="Please enter 2 character code of the country where the Registration Number has been issued by", alias="issuerCountryCode")
    __properties: ClassVar[List[str]] = ["typeCode", "number", "issuerCountryCode"]

    @field_validator('type_code')
    def type_code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['VAT', 'EIN', 'GST', 'SSN', 'EOR', 'DUN', 'FED', 'STA', 'CNP', 'IE', 'INN', 'KPP', 'OGR', 'OKP', 'MRN', 'SDT', 'FTZ', 'DAN', 'TAN', 'DTF', 'RGP', 'DLI', 'NID', 'PAS', 'MID']):
            raise ValueError("must be one of enum values ('VAT', 'EIN', 'GST', 'SSN', 'EOR', 'DUN', 'FED', 'STA', 'CNP', 'IE', 'INN', 'KPP', 'OGR', 'OKP', 'MRN', 'SDT', 'FTZ', 'DAN', 'TAN', 'DTF', 'RGP', 'DLI', 'NID', 'PAS', 'MID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressRegistrationNumbers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressRegistrationNumbers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "typeCode": obj.get("typeCode") if obj.get("typeCode") is not None else 'VAT',
            "number": obj.get("number"),
            "issuerCountryCode": obj.get("issuerCountryCode")
        })
        return _obj


