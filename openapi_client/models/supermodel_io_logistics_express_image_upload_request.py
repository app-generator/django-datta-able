# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_account import SupermodelIoLogisticsExpressAccount
from openapi_client.models.supermodel_io_logistics_express_document_images_inner import SupermodelIoLogisticsExpressDocumentImagesInner
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressImageUploadRequest(BaseModel):
    """
    SupermodelIoLogisticsExpressImageUploadRequest
    """ # noqa: E501
    original_planned_shipping_date: Annotated[str, Field(strict=True)] = Field(alias="originalPlannedShippingDate")
    accounts: Annotated[List[SupermodelIoLogisticsExpressAccount], Field(min_length=1, max_length=3)] = Field(description="Please enter all the DHL Express accounts and types to be used for this shipment")
    product_code: Annotated[str, Field(min_length=1, strict=True, max_length=6)] = Field(description="Please enter DHL Express Global Product code", alias="productCode")
    document_images: Annotated[List[SupermodelIoLogisticsExpressDocumentImagesInner], Field(min_length=1, max_length=999)] = Field(description="This section is to support multiple base64 encoded string with the image of export documentation for Paperless Trade images. When an invalid base64 encoded string is provided, an error message will be returned", alias="documentImages")
    __properties: ClassVar[List[str]] = ["originalPlannedShippingDate", "accounts", "productCode", "documentImages"]

    @field_validator('original_planned_shipping_date')
    def original_planned_shipping_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressImageUploadRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in document_images (list)
        _items = []
        if self.document_images:
            for _item in self.document_images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['documentImages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressImageUploadRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "originalPlannedShippingDate": obj.get("originalPlannedShippingDate"),
            "accounts": [SupermodelIoLogisticsExpressAccount.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "productCode": obj.get("productCode"),
            "documentImages": [SupermodelIoLogisticsExpressDocumentImagesInner.from_dict(_item) for _item in obj["documentImages"]] if obj.get("documentImages") is not None else None
        })
        return _obj


