# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity(BaseModel):
    """
    Please enter information about quantity for this line item
    """ # noqa: E501
    value: Annotated[int, Field(le=1000000000, strict=True, ge=1)] = Field(description="Please enter number of pieces in the line item")
    unit_of_measurement: Annotated[str, Field(strict=True, max_length=3)] = Field(description="Please provide correct unit of measurement<BR>                <BR>                Possible values;<BR>                BOX Boxes<BR>                2GM Centigram<BR>              2M3 Cubic Centimeters<BR>                3M3 Cubic Feet<BR>                M3 Cubic Meters<BR>                DPR Dozen Pairs<BR>                DOZ Dozen<BR>                2NO Each<BR>                PCS Pieces<BR>                GM Grams<BR>                GRS Gross<BR>                KG Kilograms<BR>                L Liters<BR>                M Meters<BR>                3GM Milligrams<BR>                3L Milliliters<BR>                X No Unit Required<BR>                NO Number<BR>                2KG Ounces<BR>                PRS Pairs<BR>                2L Gallons<BR>                3KG Pounds<BR>                CM2 Square Centimeters<BR>                2M2 Square Feet<BR>                3M2 Square Inches<BR>                M2 Square Meters<BR>                4M2 Square Yards<BR>                3M Yards<BR>                CM Centimeters<BR>                CONE Cone<BR>                CT Carat<BR>                EA Each<BR>                LBS Pounds<BR>                RILL Rill<BR>                ROLL Roll<BR>                SET Set<BR>                TU Time Unit<BR>                YDS Yard", alias="unitOfMeasurement")
    __properties: ClassVar[List[str]] = ["value", "unitOfMeasurement"]

    @field_validator('unit_of_measurement')
    def unit_of_measurement_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BOX', '2GM', '2M3', '3M3', 'M3', 'DPR', 'DOZ', '2NO', 'PCS', 'GM', 'GRS', 'KG', 'L', 'M', '3GM', '3L', 'X', 'NO', '2KG', 'PRS', '2L', '3KG', 'CM2', '2M2', '3M2', 'M2', '4M2', '3M', 'CM', 'CONE', 'CT', 'EA', 'LBS', 'RILL', 'ROLL', 'SET', 'TU', 'YDS']):
            raise ValueError("must be one of enum values ('BOX', '2GM', '2M3', '3M3', 'M3', 'DPR', 'DOZ', '2NO', 'PCS', 'GM', 'GRS', 'KG', 'L', 'M', '3GM', '3L', 'X', 'NO', '2KG', 'PRS', '2L', '3KG', 'CM2', '2M2', '3M2', 'M2', '4M2', '3M', 'CM', 'CONE', 'CT', 'EA', 'LBS', 'RILL', 'ROLL', 'SET', 'TU', 'YDS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "value": obj.get("value"),
            "unitOfMeasurement": obj.get("unitOfMeasurement")
        })
        return _obj


