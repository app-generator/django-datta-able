# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration_additional_charges_inner import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationAdditionalChargesInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration_customs_documents_inner import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomsDocumentsInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration_declaration_notes_inner import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationDeclarationNotesInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration_exporter import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationExporter
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration_invoice import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration_licenses_inner import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLicensesInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration_line_items_inner import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration_remarks_inner import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationRemarksInner
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration(BaseModel):
    """
    Here you can find all details related to export declaration
    """ # noqa: E501
    line_items: Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInner], Field(min_length=1, max_length=999)] = Field(description="Please enter details for each export line item", alias="lineItems")
    invoice: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice] = None
    remarks: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationRemarksInner], Field(max_length=3)]] = Field(default=None, description="Please enter up to three remarks. <BR>              If using Customs Invoice template COMMERCIAL_INVOICE_04, the invoice can only print the first remarks field. The recommended max length is 20 characters. <BR>              If using Customs Invoice template COMMERCIAL_INVOICE_L_10 or COMMERCIAL_INVOICE_P_10, the invoice can print all three remraks fields.  The recommended max length is 45 characters.")
    additional_charges: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationAdditionalChargesInner], Field(max_length=5)]] = Field(default=None, description="Please enter additional charge to appear on the invoice<BR>              admin, Administration Charge<BR>              delivery, Delivery Charge<BR>              documentation, Documentation Charge<BR>              expedite, Expedite Charge<BR>              export, Export Charge<BR>              freight, Freight Charge<BR>              fuel_surcharge, Fuel Surcharge<BR>              logistic, Logistic Charge<BR>              other, Other Charge<BR>              packaging, Packaging Charge<BR>              pickup, Pickup Charge<BR>              handling, Handling Charge<BR>              vat, VAT Charge<BR>              insurance, Insurance Cost<BR>              reverse_charge, Reverse Charge", alias="additionalCharges")
    destination_port_name: Optional[StrictStr] = Field(default=None, description="Please provide destination port details", alias="destinationPortName")
    place_of_incoterm: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="Name of port of departure, shipment or destination as required under the applicable delivery term.", alias="placeOfIncoterm")
    payer_vat_number: Optional[StrictStr] = Field(default=None, description="Please provide Payer VAT number", alias="payerVATNumber")
    recipient_reference: Optional[StrictStr] = Field(default=None, description="Please enter recipient reference", alias="recipientReference")
    exporter: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationExporter] = None
    package_marks: Optional[StrictStr] = Field(default=None, description="Please enter package marks", alias="packageMarks")
    declaration_notes: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationDeclarationNotesInner], Field(max_length=3)]] = Field(default=None, description="Please provide up to three dcelaration notes", alias="declarationNotes")
    export_reference: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=40)]] = Field(default=None, description="Please enter export reference", alias="exportReference")
    export_reason: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=30)]] = Field(default=None, description="Please enter export reason", alias="exportReason")
    export_reason_type: Optional[StrictStr] = Field(default=None, description="Please provide the reason for export", alias="exportReasonType")
    licenses: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLicensesInner], Field(max_length=2)]] = Field(default=None, description="Please provide details about export and import licenses")
    shipment_type: Optional[StrictStr] = Field(default=None, description="Please provide the shipment was sent for Personal (Gift) or Commercial (Sale) reasons", alias="shipmentType")
    customs_documents: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomsDocumentsInner], Field(max_length=50)]] = Field(default=None, description="Please provide the Customs Documents at invoice level", alias="customsDocuments")
    __properties: ClassVar[List[str]] = ["lineItems", "invoice", "remarks", "additionalCharges", "destinationPortName", "placeOfIncoterm", "payerVATNumber", "recipientReference", "exporter", "packageMarks", "declarationNotes", "exportReference", "exportReason", "exportReasonType", "licenses", "shipmentType", "customsDocuments"]

    @field_validator('export_reason_type')
    def export_reason_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['permanent', 'temporary', 'return', 'used_exhibition_goods_to_origin', 'intercompany_use', 'commercial_purpose_or_sale', 'personal_belongings_or_personal_use', 'sample', 'gift', 'return_to_origin', 'warranty_replacement', 'diplomatic_goods', 'defence_material']):
            raise ValueError("must be one of enum values ('permanent', 'temporary', 'return', 'used_exhibition_goods_to_origin', 'intercompany_use', 'commercial_purpose_or_sale', 'personal_belongings_or_personal_use', 'sample', 'gift', 'return_to_origin', 'warranty_replacement', 'diplomatic_goods', 'defence_material')")
        return value

    @field_validator('shipment_type')
    def shipment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['personal', 'commercial']):
            raise ValueError("must be one of enum values ('personal', 'commercial')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item in self.line_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in remarks (list)
        _items = []
        if self.remarks:
            for _item in self.remarks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['remarks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_charges (list)
        _items = []
        if self.additional_charges:
            for _item in self.additional_charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['additionalCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of exporter
        if self.exporter:
            _dict['exporter'] = self.exporter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in declaration_notes (list)
        _items = []
        if self.declaration_notes:
            for _item in self.declaration_notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['declarationNotes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in licenses (list)
        _items = []
        if self.licenses:
            for _item in self.licenses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['licenses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customs_documents (list)
        _items = []
        if self.customs_documents:
            for _item in self.customs_documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customsDocuments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lineItems": [SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInner.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "invoice": SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice.from_dict(obj["invoice"]) if obj.get("invoice") is not None else None,
            "remarks": [SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationRemarksInner.from_dict(_item) for _item in obj["remarks"]] if obj.get("remarks") is not None else None,
            "additionalCharges": [SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationAdditionalChargesInner.from_dict(_item) for _item in obj["additionalCharges"]] if obj.get("additionalCharges") is not None else None,
            "destinationPortName": obj.get("destinationPortName"),
            "placeOfIncoterm": obj.get("placeOfIncoterm"),
            "payerVATNumber": obj.get("payerVATNumber"),
            "recipientReference": obj.get("recipientReference"),
            "exporter": SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationExporter.from_dict(obj["exporter"]) if obj.get("exporter") is not None else None,
            "packageMarks": obj.get("packageMarks"),
            "declarationNotes": [SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationDeclarationNotesInner.from_dict(_item) for _item in obj["declarationNotes"]] if obj.get("declarationNotes") is not None else None,
            "exportReference": obj.get("exportReference"),
            "exportReason": obj.get("exportReason"),
            "exportReasonType": obj.get("exportReasonType"),
            "licenses": [SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLicensesInner.from_dict(_item) for _item in obj["licenses"]] if obj.get("licenses") is not None else None,
            "shipmentType": obj.get("shipmentType"),
            "customsDocuments": [SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomsDocumentsInner.from_dict(_item) for _item in obj["customsDocuments"]] if obj.get("customsDocuments") is not None else None
        })
        return _obj


