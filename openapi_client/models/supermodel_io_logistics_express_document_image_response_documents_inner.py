# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressDocumentImageResponseDocumentsInner(BaseModel):
    """
    SupermodelIoLogisticsExpressDocumentImageResponseDocumentsInner
    """ # noqa: E501
    shipment_tracking_number: StrictStr = Field(description="Shipment Tracking Number", alias="shipmentTrackingNumber")
    type_code: StrictStr = Field(description="Identifies type of the document like commercial invoice or waybill, or archived zip documents", alias="typeCode")
    function: Optional[StrictStr] = Field(default=None, description="Clearance code or document function whether for import, export or both.  Returned only for customs-entry")
    encoding_format: StrictStr = Field(description="Identifies image format the document is created in, like PDF, TIFF, or ZIP", alias="encodingFormat")
    content: StrictStr = Field(description="Contains base64 encoded document image or archived zip")
    __properties: ClassVar[List[str]] = ["shipmentTrackingNumber", "typeCode", "function", "encodingFormat", "content"]

    @field_validator('function')
    def function_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['import', 'export', 'both']):
            raise ValueError("must be one of enum values ('import', 'export', 'both')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressDocumentImageResponseDocumentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressDocumentImageResponseDocumentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shipmentTrackingNumber": obj.get("shipmentTrackingNumber"),
            "typeCode": obj.get("typeCode"),
            "function": obj.get("function"),
            "encodingFormat": obj.get("encodingFormat"),
            "content": obj.get("content")
        })
        return _obj


