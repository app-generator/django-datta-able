# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.dimensions2 import Dimensions2
from openapi_client.models.dimensions3 import Dimensions3
from openapi_client.models.supermodel_io_logistics_express_reference import SupermodelIoLogisticsExpressReference
from openapi_client.models.supermodel_io_logistics_express_tracking_response_shipments_inner_pieces_inner_events_inner import SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerEventsInner
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner(BaseModel):
    """
    SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner
    """ # noqa: E501
    number: Optional[Union[StrictFloat, StrictInt]] = None
    type_code: Optional[StrictStr] = Field(default=None, alias="typeCode")
    shipment_tracking_number: Optional[StrictStr] = Field(default=None, alias="shipmentTrackingNumber")
    tracking_number: Optional[StrictStr] = Field(default=None, alias="trackingNumber")
    description: Optional[StrictStr] = None
    weight: Optional[Union[Annotated[float, Field(multiple_of=0.001, le=999999999999, strict=True, ge=0.001)], Annotated[int, Field(le=2147483647, strict=True, ge=1)]]] = Field(default=None, description="The weight of the package.")
    dimensional_weight: Optional[Union[Annotated[float, Field(multiple_of=0.001, le=999999999999, strict=True, ge=0.001)], Annotated[int, Field(le=2147483647, strict=True, ge=1)]]] = Field(default=None, description="The weight of the package.", alias="dimensionalWeight")
    actual_weight: Optional[Union[Annotated[float, Field(multiple_of=0.001, le=999999999999, strict=True, ge=0.001)], Annotated[int, Field(le=2147483647, strict=True, ge=1)]]] = Field(default=None, description="The weight of the package.", alias="actualWeight")
    dimensions: Optional[Dimensions2] = None
    actual_dimensions: Optional[Dimensions3] = Field(default=None, alias="actualDimensions")
    unit_of_measurements: Optional[StrictStr] = Field(default=None, alias="unitOfMeasurements")
    shipper_references: Optional[Annotated[List[SupermodelIoLogisticsExpressReference], Field(max_length=999)]] = Field(default=None, alias="shipperReferences")
    events: List[SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerEventsInner]
    __properties: ClassVar[List[str]] = ["number", "typeCode", "shipmentTrackingNumber", "trackingNumber", "description", "weight", "dimensionalWeight", "actualWeight", "dimensions", "actualDimensions", "unitOfMeasurements", "shipperReferences", "events"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of actual_dimensions
        if self.actual_dimensions:
            _dict['actualDimensions'] = self.actual_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipper_references (list)
        _items = []
        if self.shipper_references:
            for _item in self.shipper_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipperReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item in self.events:
                if _item:
                    _items.append(_item.to_dict())
            _dict['events'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "number": obj.get("number"),
            "typeCode": obj.get("typeCode"),
            "shipmentTrackingNumber": obj.get("shipmentTrackingNumber"),
            "trackingNumber": obj.get("trackingNumber"),
            "description": obj.get("description"),
            "weight": obj.get("weight"),
            "dimensionalWeight": obj.get("dimensionalWeight"),
            "actualWeight": obj.get("actualWeight"),
            "dimensions": Dimensions2.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "actualDimensions": Dimensions3.from_dict(obj["actualDimensions"]) if obj.get("actualDimensions") is not None else None,
            "unitOfMeasurements": obj.get("unitOfMeasurements"),
            "shipperReferences": [SupermodelIoLogisticsExpressReference.from_dict(_item) for _item in obj["shipperReferences"]] if obj.get("shipperReferences") is not None else None,
            "events": [SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerEventsInner.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None
        })
        return _obj


