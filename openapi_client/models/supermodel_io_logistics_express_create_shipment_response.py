# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_create_shipment_response_barcode_info import SupermodelIoLogisticsExpressCreateShipmentResponseBarcodeInfo
from openapi_client.models.supermodel_io_logistics_express_create_shipment_response_documents_inner import SupermodelIoLogisticsExpressCreateShipmentResponseDocumentsInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_response_estimated_delivery_date import SupermodelIoLogisticsExpressCreateShipmentResponseEstimatedDeliveryDate
from openapi_client.models.supermodel_io_logistics_express_create_shipment_response_packages_inner import SupermodelIoLogisticsExpressCreateShipmentResponsePackagesInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_response_shipment_charges_inner import SupermodelIoLogisticsExpressCreateShipmentResponseShipmentChargesInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_response_shipment_details_inner import SupermodelIoLogisticsExpressCreateShipmentResponseShipmentDetailsInner
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressCreateShipmentResponse(BaseModel):
    """
    MyDHL API REST /shipments response schema
    """ # noqa: E501
    url: Optional[StrictStr] = Field(default=None, description="URL where the request has been sent to")
    shipment_tracking_number: Optional[StrictStr] = Field(default=None, description="Here you will receive Shipment Identification Number of your package", alias="shipmentTrackingNumber")
    cancel_pickup_url: Optional[StrictStr] = Field(default=None, description="If you requested pickup for your shipment you can use this URL to cancel the pickup", alias="cancelPickupUrl")
    tracking_url: Optional[StrictStr] = Field(default=None, description="You can use ths URL to track your shipment", alias="trackingUrl")
    dispatch_confirmation_number: Optional[StrictStr] = Field(default=None, description="If you asked for pickup service here you will find Dispach Confirmation Number which identifies your pickup booking", alias="dispatchConfirmationNumber")
    packages: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentResponsePackagesInner], Field(max_length=999)]] = Field(default=None, description="Here you can find information for all pieces your shipment is having like Piece Identification Number ")
    documents: Optional[List[SupermodelIoLogisticsExpressCreateShipmentResponseDocumentsInner]] = Field(default=None, description="Here you can find all documents created for the shipment like Transport and WaybillDoc labels, Invoice, Receipt")
    on_demand_delivery_url: Optional[StrictStr] = Field(default=None, description="In this field you will find the On Demand Delivery (ODD) URL link if requested", alias="onDemandDeliveryURL")
    shipment_details: Optional[List[SupermodelIoLogisticsExpressCreateShipmentResponseShipmentDetailsInner]] = Field(default=None, description="Here you can find additional information related to your shipment when you ask for it in the request", alias="shipmentDetails")
    shipment_charges: Optional[List[SupermodelIoLogisticsExpressCreateShipmentResponseShipmentChargesInner]] = Field(default=None, description="Here you can find rates related to your shipment", alias="shipmentCharges")
    barcode_info: Optional[SupermodelIoLogisticsExpressCreateShipmentResponseBarcodeInfo] = Field(default=None, alias="barcodeInfo")
    estimated_delivery_date: Optional[SupermodelIoLogisticsExpressCreateShipmentResponseEstimatedDeliveryDate] = Field(default=None, alias="estimatedDeliveryDate")
    warnings: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["url", "shipmentTrackingNumber", "cancelPickupUrl", "trackingUrl", "dispatchConfirmationNumber", "packages", "documents", "onDemandDeliveryURL", "shipmentDetails", "shipmentCharges", "barcodeInfo", "estimatedDeliveryDate", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in packages (list)
        _items = []
        if self.packages:
            for _item in self.packages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['packages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item in self.documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_details (list)
        _items = []
        if self.shipment_details:
            for _item in self.shipment_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipmentDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_charges (list)
        _items = []
        if self.shipment_charges:
            for _item in self.shipment_charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipmentCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of barcode_info
        if self.barcode_info:
            _dict['barcodeInfo'] = self.barcode_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of estimated_delivery_date
        if self.estimated_delivery_date:
            _dict['estimatedDeliveryDate'] = self.estimated_delivery_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "shipmentTrackingNumber": obj.get("shipmentTrackingNumber"),
            "cancelPickupUrl": obj.get("cancelPickupUrl"),
            "trackingUrl": obj.get("trackingUrl"),
            "dispatchConfirmationNumber": obj.get("dispatchConfirmationNumber"),
            "packages": [SupermodelIoLogisticsExpressCreateShipmentResponsePackagesInner.from_dict(_item) for _item in obj["packages"]] if obj.get("packages") is not None else None,
            "documents": [SupermodelIoLogisticsExpressCreateShipmentResponseDocumentsInner.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "onDemandDeliveryURL": obj.get("onDemandDeliveryURL"),
            "shipmentDetails": [SupermodelIoLogisticsExpressCreateShipmentResponseShipmentDetailsInner.from_dict(_item) for _item in obj["shipmentDetails"]] if obj.get("shipmentDetails") is not None else None,
            "shipmentCharges": [SupermodelIoLogisticsExpressCreateShipmentResponseShipmentChargesInner.from_dict(_item) for _item in obj["shipmentCharges"]] if obj.get("shipmentCharges") is not None else None,
            "barcodeInfo": SupermodelIoLogisticsExpressCreateShipmentResponseBarcodeInfo.from_dict(obj["barcodeInfo"]) if obj.get("barcodeInfo") is not None else None,
            "estimatedDeliveryDate": SupermodelIoLogisticsExpressCreateShipmentResponseEstimatedDeliveryDate.from_dict(obj["estimatedDeliveryDate"]) if obj.get("estimatedDeliveryDate") is not None else None,
            "warnings": obj.get("warnings")
        })
        return _obj


