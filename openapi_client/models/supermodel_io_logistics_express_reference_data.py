# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_reference_data_data_inner_inner import SupermodelIoLogisticsExpressReferenceDataDataInnerInner
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressReferenceData(BaseModel):
    """
    SupermodelIoLogisticsExpressReferenceData
    """ # noqa: E501
    dataset_name: Annotated[str, Field(min_length=1, strict=True, max_length=250)] = Field(description="The reference data dataset name", alias="datasetName")
    data_set_captions: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=250)]] = Field(default=None, alias="dataSetCaptions")
    data: Optional[Annotated[List[Annotated[List[SupermodelIoLogisticsExpressReferenceDataDataInnerInner], Field(max_length=50)]], Field(min_length=0, max_length=3000)]] = None
    __properties: ClassVar[List[str]] = ["datasetName", "dataSetCaptions", "data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressReferenceData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list of list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressReferenceData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasetName": obj.get("datasetName"),
            "dataSetCaptions": obj.get("dataSetCaptions"),
            "data": [
                    [SupermodelIoLogisticsExpressReferenceDataDataInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["data"]
                ] if obj.get("data") is not None else None
        })
        return _obj


