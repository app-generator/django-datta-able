# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.address import Address
from openapi_client.models.capacity_status import CapacityStatus
from openapi_client.models.contact_details import ContactDetails
from openapi_client.models.date_time_zone import DateTimeZone
from openapi_client.models.geo_location import GeoLocation
from openapi_client.models.language import Language
from openapi_client.models.opening_hours import OpeningHours
from openapi_client.models.partner import Partner
from openapi_client.models.promotion import Promotion
from openapi_client.models.service_point_capabilities import ServicePointCapabilities
from openapi_client.models.shipment_limitations import ShipmentLimitations
from openapi_client.models.shipment_limitations_by_piece import ShipmentLimitationsByPiece
from typing import Optional, Set
from typing_extensions import Self

class ServicePoint(BaseModel):
    """
    Array of the found Service Points. Each Service Point entity contains details about the service point.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The facility ID from GREF database")
    facility_id: Optional[StrictStr] = Field(default=None, description="Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.  If address is used id not possible to use.  ", alias="facilityId")
    facility_type_code: Optional[StrictStr] = Field(default=None, description="The facility type code from GREF database", alias="facilityTypeCode")
    service_area_code: Optional[StrictStr] = Field(default=None, description="The service pointâ€™s Service Area Code", alias="serviceAreaCode")
    service_point_name: Optional[StrictStr] = Field(default=None, description="Name of the service point", alias="servicePointName")
    service_point_name_formatted: Optional[StrictStr] = Field(default=None, description="Formatted name of the service point", alias="servicePointNameFormatted")
    local_name: Optional[StrictStr] = Field(default=None, description="The local trading name of the Service Point", alias="localName")
    service_point_type: Optional[StrictStr] = Field(default=None, description="The type of the Service Point. CITY, STATION, PARTNER or TWENTYFOURSEVEN.", alias="servicePointType")
    address: Optional[Address] = None
    geo_location: Optional[GeoLocation] = Field(default=None, alias="geoLocation")
    distance: Optional[StrictStr] = Field(default=None, description="The distance from the search address to this Service Point (beeline). ")
    shipping_cut_off_time: Optional[StrictStr] = Field(default=None, description="Time until which a shipment can be handed in at the Service Point, and is still shipped on the same day", alias="shippingCutOffTime")
    opening_hours: Optional[OpeningHours] = Field(default=None, alias="openingHours")
    service_point_capabilities: Optional[ServicePointCapabilities] = Field(default=None, alias="servicePointCapabilities")
    contact_details: Optional[ContactDetails] = Field(default=None, alias="contactDetails")
    shipping_cut_off_time_html: Optional[StrictStr] = Field(default=None, description="Obsolete. This is planned to be removed in future releases.", alias="shippingCutOffTimeHtml")
    distance_value: Optional[StrictStr] = Field(default=None, description="Distance of SVP from searched location", alias="distanceValue")
    distance_metric: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Metric of distance", alias="distanceMetric")
    language: Optional[Language] = None
    shipment_limitations: Optional[ShipmentLimitations] = Field(default=None, alias="shipmentLimitations")
    shipment_limitations_by_piece: Optional[ShipmentLimitationsByPiece] = Field(default=None, alias="shipmentLimitationsByPiece")
    charge_code: Optional[StrictStr] = Field(default=None, description="Charge code, e.g. XX", alias="chargeCode")
    partner: Optional[Partner] = None
    promotion: Optional[Promotion] = None
    capacity_status: Optional[CapacityStatus] = Field(default=None, alias="capacityStatus")
    svp_status: Optional[StrictStr] = Field(default=None, description="Status of the service point(Active or Inactive)", alias="svpStatus")
    work_week_start: Optional[StrictInt] = Field(default=None, description="Number of day when the work week starts. It starts from 0 to 6(Sunday to Saturday)", alias="workWeekStart")
    located_at: Optional[StrictStr] = Field(default=None, alias="locatedAt")
    time_zone: Optional[DateTimeZone] = Field(default=None, alias="timeZone")
    __properties: ClassVar[List[str]] = ["id", "facilityId", "facilityTypeCode", "serviceAreaCode", "servicePointName", "servicePointNameFormatted", "localName", "servicePointType", "address", "geoLocation", "distance", "shippingCutOffTime", "openingHours", "servicePointCapabilities", "contactDetails", "shippingCutOffTimeHtml", "distanceValue", "distanceMetric", "language", "shipmentLimitations", "shipmentLimitationsByPiece", "chargeCode", "partner", "promotion", "capacityStatus", "svpStatus", "workWeekStart", "locatedAt", "timeZone"]

    @field_validator('service_point_type')
    def service_point_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CITY', 'STATION', 'PARTNER', 'TWENTYFOURSEVEN']):
            raise ValueError("must be one of enum values ('CITY', 'STATION', 'PARTNER', 'TWENTYFOURSEVEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServicePoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_location
        if self.geo_location:
            _dict['geoLocation'] = self.geo_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opening_hours
        if self.opening_hours:
            _dict['openingHours'] = self.opening_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_point_capabilities
        if self.service_point_capabilities:
            _dict['servicePointCapabilities'] = self.service_point_capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_details
        if self.contact_details:
            _dict['contactDetails'] = self.contact_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language
        if self.language:
            _dict['language'] = self.language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipment_limitations
        if self.shipment_limitations:
            _dict['shipmentLimitations'] = self.shipment_limitations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipment_limitations_by_piece
        if self.shipment_limitations_by_piece:
            _dict['shipmentLimitationsByPiece'] = self.shipment_limitations_by_piece.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partner
        if self.partner:
            _dict['partner'] = self.partner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion
        if self.promotion:
            _dict['promotion'] = self.promotion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capacity_status
        if self.capacity_status:
            _dict['capacityStatus'] = self.capacity_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_zone
        if self.time_zone:
            _dict['timeZone'] = self.time_zone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServicePoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "facilityId": obj.get("facilityId"),
            "facilityTypeCode": obj.get("facilityTypeCode"),
            "serviceAreaCode": obj.get("serviceAreaCode"),
            "servicePointName": obj.get("servicePointName"),
            "servicePointNameFormatted": obj.get("servicePointNameFormatted"),
            "localName": obj.get("localName"),
            "servicePointType": obj.get("servicePointType"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "geoLocation": GeoLocation.from_dict(obj["geoLocation"]) if obj.get("geoLocation") is not None else None,
            "distance": obj.get("distance"),
            "shippingCutOffTime": obj.get("shippingCutOffTime"),
            "openingHours": OpeningHours.from_dict(obj["openingHours"]) if obj.get("openingHours") is not None else None,
            "servicePointCapabilities": ServicePointCapabilities.from_dict(obj["servicePointCapabilities"]) if obj.get("servicePointCapabilities") is not None else None,
            "contactDetails": ContactDetails.from_dict(obj["contactDetails"]) if obj.get("contactDetails") is not None else None,
            "shippingCutOffTimeHtml": obj.get("shippingCutOffTimeHtml"),
            "distanceValue": obj.get("distanceValue"),
            "distanceMetric": obj.get("distanceMetric"),
            "language": Language.from_dict(obj["language"]) if obj.get("language") is not None else None,
            "shipmentLimitations": ShipmentLimitations.from_dict(obj["shipmentLimitations"]) if obj.get("shipmentLimitations") is not None else None,
            "shipmentLimitationsByPiece": ShipmentLimitationsByPiece.from_dict(obj["shipmentLimitationsByPiece"]) if obj.get("shipmentLimitationsByPiece") is not None else None,
            "chargeCode": obj.get("chargeCode"),
            "partner": Partner.from_dict(obj["partner"]) if obj.get("partner") is not None else None,
            "promotion": Promotion.from_dict(obj["promotion"]) if obj.get("promotion") is not None else None,
            "capacityStatus": CapacityStatus.from_dict(obj["capacityStatus"]) if obj.get("capacityStatus") is not None else None,
            "svpStatus": obj.get("svpStatus"),
            "workWeekStart": obj.get("workWeekStart"),
            "locatedAt": obj.get("locatedAt"),
            "timeZone": DateTimeZone.from_dict(obj["timeZone"]) if obj.get("timeZone") is not None else None
        })
        return _obj


