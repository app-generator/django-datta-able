# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_account import SupermodelIoLogisticsExpressAccount
from openapi_client.models.supermodel_io_logistics_express_pickup_request_customer_details import SupermodelIoLogisticsExpressPickupRequestCustomerDetails
from openapi_client.models.supermodel_io_logistics_express_pickup_request_shipment_details_inner import SupermodelIoLogisticsExpressPickupRequestShipmentDetailsInner
from openapi_client.models.supermodel_io_logistics_express_pickup_request_special_instructions_inner import SupermodelIoLogisticsExpressPickupRequestSpecialInstructionsInner
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressPickupRequest(BaseModel):
    """
    RequestPickup schema definition
    """ # noqa: E501
    planned_pickup_date_and_time: Annotated[str, Field(min_length=1, strict=True, max_length=29)] = Field(description="Identifies the date and time the package is ready for pickup Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24 hour clock. The date and time parts are separated by the letter T (e.g. 2006-06-26T17:00:00 GMT+01:00).<BR>                           ", alias="plannedPickupDateAndTime")
    close_time: Optional[Annotated[str, Field(strict=True, max_length=5)]] = Field(default=None, description="The latest time the location premises is available to dispatch the DHL Express shipment. (HH:MM) ", alias="closeTime")
    location: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="Provides information on where the package should be picked up by DHL courier. <BR>                           ")
    location_type: Optional[StrictStr] = Field(default=None, description="Provides information on where the package should be picked up by DHL courier. <BR>                           ", alias="locationType")
    accounts: Annotated[List[SupermodelIoLogisticsExpressAccount], Field(min_length=1, max_length=5)]
    special_instructions: Optional[Annotated[List[SupermodelIoLogisticsExpressPickupRequestSpecialInstructionsInner], Field(max_length=4)]] = Field(default=None, description="Details special pickup instructions you may wish to send to the DHL Courier.", alias="specialInstructions")
    remark: Optional[StrictStr] = Field(default=None, description="Please provide additional pickup remark")
    customer_details: SupermodelIoLogisticsExpressPickupRequestCustomerDetails = Field(alias="customerDetails")
    shipment_details: Annotated[List[SupermodelIoLogisticsExpressPickupRequestShipmentDetailsInner], Field(min_length=1, max_length=999)] = Field(description="Please provide details related to shipment you want to do the pickup for", alias="shipmentDetails")
    __properties: ClassVar[List[str]] = ["plannedPickupDateAndTime", "closeTime", "location", "locationType", "accounts", "specialInstructions", "remark", "customerDetails", "shipmentDetails"]

    @field_validator('close_time')
    def close_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"([0-1][0-9]|2[0-3]):([0-5][0-9])", value):
            raise ValueError(r"must validate the regular expression /([0-1][0-9]|2[0-3]):([0-5][0-9])/")
        return value

    @field_validator('location_type')
    def location_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['business', 'residence']):
            raise ValueError("must be one of enum values ('business', 'residence')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressPickupRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_instructions (list)
        _items = []
        if self.special_instructions:
            for _item in self.special_instructions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specialInstructions'] = _items
        # override the default output from pydantic by calling `to_dict()` of customer_details
        if self.customer_details:
            _dict['customerDetails'] = self.customer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_details (list)
        _items = []
        if self.shipment_details:
            for _item in self.shipment_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipmentDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressPickupRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plannedPickupDateAndTime": obj.get("plannedPickupDateAndTime"),
            "closeTime": obj.get("closeTime"),
            "location": obj.get("location"),
            "locationType": obj.get("locationType"),
            "accounts": [SupermodelIoLogisticsExpressAccount.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "specialInstructions": [SupermodelIoLogisticsExpressPickupRequestSpecialInstructionsInner.from_dict(_item) for _item in obj["specialInstructions"]] if obj.get("specialInstructions") is not None else None,
            "remark": obj.get("remark"),
            "customerDetails": SupermodelIoLogisticsExpressPickupRequestCustomerDetails.from_dict(obj["customerDetails"]) if obj.get("customerDetails") is not None else None,
            "shipmentDetails": [SupermodelIoLogisticsExpressPickupRequestShipmentDetailsInner.from_dict(_item) for _item in obj["shipmentDetails"]] if obj.get("shipmentDetails") is not None else None
        })
        return _obj


