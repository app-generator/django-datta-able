# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_delivery_options_response_delivery_options_inner_delivery_windows_inner import SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInnerDeliveryWindowsInner
from openapi_client.models.supermodel_io_logistics_express_delivery_options_response_delivery_options_inner_parameters_inner import SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInnerParametersInner
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInner(BaseModel):
    """
    SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInner
    """ # noqa: E501
    type: StrictStr = Field(description="The name of delivery option\"")
    parameters: Annotated[List[SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInnerParametersInner], Field(max_length=10)]
    service_point_url: Optional[StrictStr] = Field(default=None, description="Returned only for type=servicePoint", alias="servicePointURL")
    delivery_windows: Optional[List[SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInnerDeliveryWindowsInner]] = Field(default=None, description="Returned only for type=scheduleDelivery and vacationHold. Important: the start and end datetime field values must be among the options provided in GET delivery-option response. ", alias="deliveryWindows")
    __properties: ClassVar[List[str]] = ["type", "parameters", "servicePointURL", "deliveryWindows"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['signatureRelease', 'servicePoint', 'scheduleDelivery', 'vacationHold']):
            raise ValueError("must be one of enum values ('signatureRelease', 'servicePoint', 'scheduleDelivery', 'vacationHold')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in delivery_windows (list)
        _items = []
        if self.delivery_windows:
            for _item in self.delivery_windows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deliveryWindows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "parameters": [SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInnerParametersInner.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "servicePointURL": obj.get("servicePointURL"),
            "deliveryWindows": [SupermodelIoLogisticsExpressDeliveryOptionsResponseDeliveryOptionsInnerDeliveryWindowsInner.from_dict(_item) for _item in obj["deliveryWindows"]] if obj.get("deliveryWindows") is not None else None
        })
        return _obj


