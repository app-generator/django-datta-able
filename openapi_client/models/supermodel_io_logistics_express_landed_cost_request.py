# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_account import SupermodelIoLogisticsExpressAccount
from openapi_client.models.supermodel_io_logistics_express_landed_cost_request_charges_inner import SupermodelIoLogisticsExpressLandedCostRequestChargesInner
from openapi_client.models.supermodel_io_logistics_express_landed_cost_request_customer_details import SupermodelIoLogisticsExpressLandedCostRequestCustomerDetails
from openapi_client.models.supermodel_io_logistics_express_landed_cost_request_items_inner import SupermodelIoLogisticsExpressLandedCostRequestItemsInner
from openapi_client.models.supermodel_io_logistics_express_package_rr import SupermodelIoLogisticsExpressPackageRR
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressLandedCostRequest(BaseModel):
    """
    Landed cost request model description
    """ # noqa: E501
    customer_details: SupermodelIoLogisticsExpressLandedCostRequestCustomerDetails = Field(alias="customerDetails")
    accounts: Annotated[List[SupermodelIoLogisticsExpressAccount], Field(max_length=5)] = Field(description="Please enter all the DHL Express accounts and types to be used for this shipment")
    product_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=6)]] = Field(default=None, description="Please enter DHL Express Global Product code", alias="productCode")
    local_product_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=3)]] = Field(default=None, description="Please enter DHL Express Local Product code", alias="localProductCode")
    unit_of_measurement: StrictStr = Field(description="Please enter Unit of measurement - metric,imperial", alias="unitOfMeasurement")
    currency_code: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(description="Currency code for the item price (the product being sold) and freight charge. The Landed Cost calculation result will be returned in this defined currency", alias="currencyCode")
    is_customs_declarable: StrictBool = Field(description="Set this to true is shipment contains declarable content", alias="isCustomsDeclarable")
    is_dtp_requested: Optional[StrictBool] = Field(default=None, description="Set this to true if you want DHL EXpress product Duties and Taxes Paid outside shipment destination", alias="isDTPRequested")
    is_insurance_requested: Optional[StrictBool] = Field(default=None, description="Set this true if you ask for DHL Express insurance service", alias="isInsuranceRequested")
    get_cost_breakdown: StrictBool = Field(description="Allowed values 'true' - item cost breakdown will be returned, 'false' - item cost breakdown will not be returned", alias="getCostBreakdown")
    charges: Optional[Annotated[List[SupermodelIoLogisticsExpressLandedCostRequestChargesInner], Field(max_length=20)]] = Field(default=None, description="Please provide any additional charges you would like to include in total cost calculation")
    shipment_purpose: Optional[StrictStr] = Field(default=None, description="Possible values:<BR>      commercial: B2B<BR>      personal: B2C<BR>      commercia': B2B<BR>      personal: B2C", alias="shipmentPurpose")
    transportation_mode: Optional[StrictStr] = Field(default=None, alias="transportationMode")
    merchant_selected_carrier_name: Optional[StrictStr] = Field(default=None, description="Carrier being used to ship with. Allowed values are:<BR>      'DHL','UPS','FEDEX','TNT','POST',<BR>      'OTHERS'", alias="merchantSelectedCarrierName")
    packages: Annotated[List[SupermodelIoLogisticsExpressPackageRR], Field(min_length=1, max_length=999)] = Field(description="Here you can define properties per package")
    items: Annotated[List[SupermodelIoLogisticsExpressLandedCostRequestItemsInner], Field(min_length=1, max_length=1000)]
    get_tariff_formula: Optional[StrictBool] = Field(default=None, description="Allowed values 'true' - tariff formula on item and shipment level will be returned, 'false' - tariff formula on item and shipment level will not be returned", alias="getTariffFormula")
    get_quotation_id: Optional[StrictBool] = Field(default=None, description="Allowed values 'true' - quotation ID on shipment level will be returned, 'false' - quotation ID on shipment level will not be returned", alias="getQuotationID")
    __properties: ClassVar[List[str]] = ["customerDetails", "accounts", "productCode", "localProductCode", "unitOfMeasurement", "currencyCode", "isCustomsDeclarable", "isDTPRequested", "isInsuranceRequested", "getCostBreakdown", "charges", "shipmentPurpose", "transportationMode", "merchantSelectedCarrierName", "packages", "items", "getTariffFormula", "getQuotationID"]

    @field_validator('unit_of_measurement')
    def unit_of_measurement_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['metric', 'imperial']):
            raise ValueError("must be one of enum values ('metric', 'imperial')")
        return value

    @field_validator('shipment_purpose')
    def shipment_purpose_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['commercial', 'personal']):
            raise ValueError("must be one of enum values ('commercial', 'personal')")
        return value

    @field_validator('transportation_mode')
    def transportation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['air', 'ocean', 'ground']):
            raise ValueError("must be one of enum values ('air', 'ocean', 'ground')")
        return value

    @field_validator('merchant_selected_carrier_name')
    def merchant_selected_carrier_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DHL', 'UPS', 'FEDEX', 'TNT', 'POST', 'OTHERS']):
            raise ValueError("must be one of enum values ('DHL', 'UPS', 'FEDEX', 'TNT', 'POST', 'OTHERS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressLandedCostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_details
        if self.customer_details:
            _dict['customerDetails'] = self.customer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in packages (list)
        _items = []
        if self.packages:
            for _item in self.packages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['packages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressLandedCostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerDetails": SupermodelIoLogisticsExpressLandedCostRequestCustomerDetails.from_dict(obj["customerDetails"]) if obj.get("customerDetails") is not None else None,
            "accounts": [SupermodelIoLogisticsExpressAccount.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "productCode": obj.get("productCode"),
            "localProductCode": obj.get("localProductCode"),
            "unitOfMeasurement": obj.get("unitOfMeasurement"),
            "currencyCode": obj.get("currencyCode"),
            "isCustomsDeclarable": obj.get("isCustomsDeclarable"),
            "isDTPRequested": obj.get("isDTPRequested"),
            "isInsuranceRequested": obj.get("isInsuranceRequested"),
            "getCostBreakdown": obj.get("getCostBreakdown"),
            "charges": [SupermodelIoLogisticsExpressLandedCostRequestChargesInner.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "shipmentPurpose": obj.get("shipmentPurpose"),
            "transportationMode": obj.get("transportationMode"),
            "merchantSelectedCarrierName": obj.get("merchantSelectedCarrierName"),
            "packages": [SupermodelIoLogisticsExpressPackageRR.from_dict(_item) for _item in obj["packages"]] if obj.get("packages") is not None else None,
            "items": [SupermodelIoLogisticsExpressLandedCostRequestItemsInner.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "getTariffFormula": obj.get("getTariffFormula"),
            "getQuotationID": obj.get("getQuotationID")
        })
        return _obj


