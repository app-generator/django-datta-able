# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.dimensions import Dimensions
from typing import Optional, Set
from typing_extensions import Self

class ServicePointCapabilities(BaseModel):
    """
    An entity that lists all capabilities of a Service Point.
    """ # noqa: E501
    parking_available: Optional[StrictBool] = Field(default=None, description="Indicates whether parking facility is available in the service point or not", alias="parkingAvailable")
    disabled_access: Optional[StrictBool] = Field(default=None, description="Indicates whether disabled access is available in the service point or not", alias="disabledAccess")
    shipment_drop_off: Optional[StrictBool] = Field(default=None, description="Indicates whether Shipment Drop Off is available in the service point or not", alias="shipmentDropOff")
    shipment_collection: Optional[StrictBool] = Field(default=None, description="Indicates whether Shipment Collection is available in the service point or not", alias="shipmentCollection")
    international_shipping: Optional[StrictBool] = Field(default=None, description="Indicates whether International Shipping is available in the service point or not", alias="internationalShipping")
    domestic_shipping: Optional[StrictBool] = Field(default=None, description="Indicates whether Domestic Shipping is available in the service point or not", alias="domesticShipping")
    account_shippers: Optional[StrictBool] = Field(default=None, description="Indicates whether Account Shipping is available in the service point or not", alias="accountShippers")
    label_printing: Optional[StrictBool] = Field(default=None, description="Indicates whether Label Printing is available in the service point or not", alias="labelPrinting")
    insurance: Optional[StrictBool] = Field(default=None, description="Indicates whether Insurance facility is available in the service point or not")
    import_charges: Optional[StrictBool] = Field(default=None, description="Indicates whether Import Charges is applicable in the service point or not", alias="importCharges")
    packaging: Optional[StrictBool] = Field(default=None, description="Indicates whether Packaging facility is available in the service point or not")
    receiver_paid: Optional[StrictBool] = Field(default=None, description="Indicates whether Receiver Paying option is available in the service point or not", alias="receiverPaid")
    visa_program: Optional[StrictBool] = Field(default=None, description="Indicates whether VISA program is applicable in the service point or not", alias="visaProgram")
    pay_with_cash: Optional[StrictBool] = Field(default=None, description="Indicates whether pay by cash option is available in the service point or not", alias="payWithCash")
    pay_with_credit_card: Optional[StrictBool] = Field(default=None, description="Indicates whether pay with credit card option is available in the service point or not", alias="payWithCreditCard")
    pay_with_cheque: Optional[StrictBool] = Field(default=None, description="Indicates whether pay with cheque option is available in the service point or not", alias="payWithCheque")
    pay_with_mobile: Optional[StrictBool] = Field(default=None, description="Indicates whether pay with mobile option is available in the service point or not", alias="payWithMobile")
    pay_with_pay_pal: Optional[StrictBool] = Field(default=None, description="Indicates whether pay with paypal option is available in the service point or not", alias="payWithPayPal")
    parking_title: Optional[StrictStr] = Field(default=None, description="Title for the parking icon", alias="parkingTitle")
    disabled_access_title: Optional[StrictStr] = Field(default=None, description="Title for the disable wheel chair icon", alias="disabledAccessTitle")
    piece_weight_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Piece Weight Limit", alias="pieceWeightLimit")
    piece_weight_limit_unit: Optional[StrictStr] = Field(default=None, description="Enumeration (KG or LB)", alias="pieceWeightLimitUnit")
    piece_dimensions_limit: Optional[Dimensions] = Field(default=None, alias="pieceDimensionsLimit")
    piece_dimensions_limit_unit: Optional[StrictStr] = Field(default=None, description="Enumeration (CM or IN)", alias="pieceDimensionsLimitUnit")
    piece_count_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number (integer)", alias="pieceCountLimit")
    account_prepaid_shippers: Optional[StrictBool] = Field(default=None, description="Account prepaid shippers", alias="accountPrepaidShippers")
    prepaid_shippers: Optional[StrictBool] = Field(default=None, description="Prepaid shippers", alias="prepaidShippers")
    pre_print_return_label: Optional[StrictBool] = Field(default=None, description="Pre-printed return label", alias="prePrintReturnLabel")
    label_free: Optional[StrictBool] = Field(default=None, description="Indicates whether this particular service point can handle label free shipments or not", alias="labelFree")
    ppc_list: Optional[List[StrictStr]] = Field(default=None, description="PPC list.", alias="ppcList")
    html: Optional[StrictStr] = Field(default=None, description="Obsolete. This is planned to be removed in future releases.")
    capability_codes: Optional[StrictStr] = Field(default=None, description="PPC codes available for this service point", alias="capabilityCodes")
    __properties: ClassVar[List[str]] = ["parkingAvailable", "disabledAccess", "shipmentDropOff", "shipmentCollection", "internationalShipping", "domesticShipping", "accountShippers", "labelPrinting", "insurance", "importCharges", "packaging", "receiverPaid", "visaProgram", "payWithCash", "payWithCreditCard", "payWithCheque", "payWithMobile", "payWithPayPal", "parkingTitle", "disabledAccessTitle", "pieceWeightLimit", "pieceWeightLimitUnit", "pieceDimensionsLimit", "pieceDimensionsLimitUnit", "pieceCountLimit", "accountPrepaidShippers", "prepaidShippers", "prePrintReturnLabel", "labelFree", "ppcList", "html", "capabilityCodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServicePointCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of piece_dimensions_limit
        if self.piece_dimensions_limit:
            _dict['pieceDimensionsLimit'] = self.piece_dimensions_limit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServicePointCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parkingAvailable": obj.get("parkingAvailable"),
            "disabledAccess": obj.get("disabledAccess"),
            "shipmentDropOff": obj.get("shipmentDropOff"),
            "shipmentCollection": obj.get("shipmentCollection"),
            "internationalShipping": obj.get("internationalShipping"),
            "domesticShipping": obj.get("domesticShipping"),
            "accountShippers": obj.get("accountShippers"),
            "labelPrinting": obj.get("labelPrinting"),
            "insurance": obj.get("insurance"),
            "importCharges": obj.get("importCharges"),
            "packaging": obj.get("packaging"),
            "receiverPaid": obj.get("receiverPaid"),
            "visaProgram": obj.get("visaProgram"),
            "payWithCash": obj.get("payWithCash"),
            "payWithCreditCard": obj.get("payWithCreditCard"),
            "payWithCheque": obj.get("payWithCheque"),
            "payWithMobile": obj.get("payWithMobile"),
            "payWithPayPal": obj.get("payWithPayPal"),
            "parkingTitle": obj.get("parkingTitle"),
            "disabledAccessTitle": obj.get("disabledAccessTitle"),
            "pieceWeightLimit": obj.get("pieceWeightLimit"),
            "pieceWeightLimitUnit": obj.get("pieceWeightLimitUnit"),
            "pieceDimensionsLimit": Dimensions.from_dict(obj["pieceDimensionsLimit"]) if obj.get("pieceDimensionsLimit") is not None else None,
            "pieceDimensionsLimitUnit": obj.get("pieceDimensionsLimitUnit"),
            "pieceCountLimit": obj.get("pieceCountLimit"),
            "accountPrepaidShippers": obj.get("accountPrepaidShippers"),
            "prepaidShippers": obj.get("prepaidShippers"),
            "prePrintReturnLabel": obj.get("prePrintReturnLabel"),
            "labelFree": obj.get("labelFree"),
            "ppcList": obj.get("ppcList"),
            "html": obj.get("html"),
            "capabilityCodes": obj.get("capabilityCodes")
        })
        return _obj


