# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_account import SupermodelIoLogisticsExpressAccount
from openapi_client.models.supermodel_io_logistics_express_package_rr import SupermodelIoLogisticsExpressPackageRR
from openapi_client.models.supermodel_io_logistics_express_value_added_services_rates import SupermodelIoLogisticsExpressValueAddedServicesRates
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner(BaseModel):
    """
    SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner
    """ # noqa: E501
    product_code: Annotated[str, Field(min_length=1, strict=True, max_length=6)] = Field(description="Please provide DHL Express Global product code of the shipment", alias="productCode")
    local_product_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=3)]] = Field(default=None, description="Please provide DHL Express Local product code of the shipment", alias="localProductCode")
    accounts: Optional[Annotated[List[SupermodelIoLogisticsExpressAccount], Field(max_length=5)]] = None
    value_added_services: Optional[Annotated[List[SupermodelIoLogisticsExpressValueAddedServicesRates], Field(max_length=99)]] = Field(default=None, alias="valueAddedServices")
    is_customs_declarable: StrictBool = Field(description="For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false)", alias="isCustomsDeclarable")
    declared_value: Optional[Union[Annotated[float, Field(multiple_of=0.001, le=999999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="For customs purposes please advise on declared value of the shipment", alias="declaredValue")
    declared_value_currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="For customs purposes please advise on declared value currency code of the shipment", alias="declaredValueCurrency")
    unit_of_measurement: StrictStr = Field(description="Please enter Unit of measurement - metric,imperial", alias="unitOfMeasurement")
    shipment_tracking_number: Optional[StrictStr] = Field(default=None, description="Please provide Shipment Identification number (AWB number)", alias="shipmentTrackingNumber")
    packages: Annotated[List[SupermodelIoLogisticsExpressPackageRR], Field(min_length=1, max_length=999)]
    __properties: ClassVar[List[str]] = ["productCode", "localProductCode", "accounts", "valueAddedServices", "isCustomsDeclarable", "declaredValue", "declaredValueCurrency", "unitOfMeasurement", "shipmentTrackingNumber", "packages"]

    @field_validator('unit_of_measurement')
    def unit_of_measurement_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['metric', 'imperial']):
            raise ValueError("must be one of enum values ('metric', 'imperial')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in value_added_services (list)
        _items = []
        if self.value_added_services:
            for _item in self.value_added_services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['valueAddedServices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in packages (list)
        _items = []
        if self.packages:
            for _item in self.packages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['packages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "productCode": obj.get("productCode"),
            "localProductCode": obj.get("localProductCode"),
            "accounts": [SupermodelIoLogisticsExpressAccount.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "valueAddedServices": [SupermodelIoLogisticsExpressValueAddedServicesRates.from_dict(_item) for _item in obj["valueAddedServices"]] if obj.get("valueAddedServices") is not None else None,
            "isCustomsDeclarable": obj.get("isCustomsDeclarable"),
            "declaredValue": obj.get("declaredValue"),
            "declaredValueCurrency": obj.get("declaredValueCurrency"),
            "unitOfMeasurement": obj.get("unitOfMeasurement"),
            "shipmentTrackingNumber": obj.get("shipmentTrackingNumber"),
            "packages": [SupermodelIoLogisticsExpressPackageRR.from_dict(_item) for _item in obj["packages"]] if obj.get("packages") is not None else None
        })
        return _obj


