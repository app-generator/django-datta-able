# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.estimated_delivery_date import EstimatedDeliveryDate
from openapi_client.models.pickup import Pickup
from openapi_client.models.supermodel_io_logistics_express_account import SupermodelIoLogisticsExpressAccount
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content import SupermodelIoLogisticsExpressCreateShipmentRequestContent
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetails
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_get_additional_information_inner import SupermodelIoLogisticsExpressCreateShipmentRequestGetAdditionalInformationInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_on_demand_delivery import SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_output_image_properties import SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_parent_shipment import SupermodelIoLogisticsExpressCreateShipmentRequestParentShipment
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_prepaid_charges_inner import SupermodelIoLogisticsExpressCreateShipmentRequestPrepaidChargesInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_shipment_notification_inner import SupermodelIoLogisticsExpressCreateShipmentRequestShipmentNotificationInner
from openapi_client.models.supermodel_io_logistics_express_document_images_inner import SupermodelIoLogisticsExpressDocumentImagesInner
from openapi_client.models.supermodel_io_logistics_express_identifier import SupermodelIoLogisticsExpressIdentifier
from openapi_client.models.supermodel_io_logistics_express_reference import SupermodelIoLogisticsExpressReference
from openapi_client.models.supermodel_io_logistics_express_value_added_services import SupermodelIoLogisticsExpressValueAddedServices
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressCreateShipmentRequest(BaseModel):
    """
    SupermodelIoLogisticsExpressCreateShipmentRequest
    """ # noqa: E501
    planned_shipping_date_and_time: Annotated[str, Field(min_length=1, strict=True, max_length=29)] = Field(description="Identifies the date and time the package is tendered. Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24 hour clock. The date and time parts are separated by the letter T (e.g. 2006-06-26T17:00:00 GMT+01:00).", alias="plannedShippingDateAndTime")
    pickup: Pickup
    product_code: Annotated[str, Field(min_length=1, strict=True, max_length=6)] = Field(description="Please enter DHL Express Global Product code", alias="productCode")
    local_product_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=3)]] = Field(default=None, description="Please enter DHL Express Local Product code. Important when shipping domestic products.", alias="localProductCode")
    get_rate_estimates: Optional[StrictBool] = Field(default=False, description="Please advise if you want to get rate estimates for given shipment", alias="getRateEstimates")
    accounts: Annotated[List[SupermodelIoLogisticsExpressAccount], Field(min_length=1, max_length=3)] = Field(description="Please enter all the DHL Express accounts and types to be used for this shipment")
    value_added_services: Optional[Annotated[List[SupermodelIoLogisticsExpressValueAddedServices], Field(max_length=99)]] = Field(default=None, description="This section communicates additional shipping services, such as Insurance (or Shipment Value Protection).", alias="valueAddedServices")
    output_image_properties: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties] = Field(default=None, alias="outputImageProperties")
    customer_references: Optional[Annotated[List[SupermodelIoLogisticsExpressReference], Field(max_length=999)]] = Field(default=None, description="Here you can declare your customer references", alias="customerReferences")
    identifiers: Optional[Annotated[List[SupermodelIoLogisticsExpressIdentifier], Field(max_length=5)]] = Field(default=None, description="Identifiers section is on the shipment level where you can optionaly provide a DHL Express waybill number. This has to be enabled by your DHL Express IT contact.")
    customer_details: SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetails = Field(alias="customerDetails")
    content: SupermodelIoLogisticsExpressCreateShipmentRequestContent
    document_images: Optional[Annotated[List[SupermodelIoLogisticsExpressDocumentImagesInner], Field(min_length=1, max_length=999)]] = Field(default=None, description="This section is to support multiple base64 encoded string with the image of export documentation for Paperless Trade images. When an invalid base64 encoded string is provided, an error message will be returned", alias="documentImages")
    on_demand_delivery: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery] = Field(default=None, alias="onDemandDelivery")
    request_ondemand_delivery_url: Optional[StrictBool] = Field(default=None, description="Determines whether to request the On Demand Delivery (ODD) link. When set to true it will provide an URL link for the specified Waybill Number, Shipper Account Number. The default value is false, no ODD link URL is provided in the response message.", alias="requestOndemandDeliveryURL")
    shipment_notification: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestShipmentNotificationInner], Field(max_length=5)]] = Field(default=None, description="This is to support sending email notification once the shipment is created. The email will contain the basic information on the shipper, recipient, waybill number, and shipment information", alias="shipmentNotification")
    prepaid_charges: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestPrepaidChargesInner], Field(max_length=1)]] = Field(default=None, description="Please provide any charges you have already paid for this shipment, like freight paid upfront. To allow using this section please contact your DHL Express representative", alias="prepaidCharges")
    get_transliterated_response: Optional[StrictBool] = Field(default=None, description="If set to true, response will return transliterated text of shipper and receiver details.", alias="getTransliteratedResponse")
    estimated_delivery_date: Optional[EstimatedDeliveryDate] = Field(default=None, alias="estimatedDeliveryDate")
    get_additional_information: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestGetAdditionalInformationInner], Field(max_length=3)]] = Field(default=None, description="Provides additional information in the response like service area details, routing code and pickup-related information", alias="getAdditionalInformation")
    parent_shipment: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestParentShipment] = Field(default=None, alias="parentShipment")
    __properties: ClassVar[List[str]] = ["plannedShippingDateAndTime", "pickup", "productCode", "localProductCode", "getRateEstimates", "accounts", "valueAddedServices", "outputImageProperties", "customerReferences", "identifiers", "customerDetails", "content", "documentImages", "onDemandDelivery", "requestOndemandDeliveryURL", "shipmentNotification", "prepaidCharges", "getTransliteratedResponse", "estimatedDeliveryDate", "getAdditionalInformation", "parentShipment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pickup
        if self.pickup:
            _dict['pickup'] = self.pickup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in value_added_services (list)
        _items = []
        if self.value_added_services:
            for _item in self.value_added_services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['valueAddedServices'] = _items
        # override the default output from pydantic by calling `to_dict()` of output_image_properties
        if self.output_image_properties:
            _dict['outputImageProperties'] = self.output_image_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in customer_references (list)
        _items = []
        if self.customer_references:
            for _item in self.customer_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customerReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in identifiers (list)
        _items = []
        if self.identifiers:
            for _item in self.identifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['identifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of customer_details
        if self.customer_details:
            _dict['customerDetails'] = self.customer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in document_images (list)
        _items = []
        if self.document_images:
            for _item in self.document_images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['documentImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of on_demand_delivery
        if self.on_demand_delivery:
            _dict['onDemandDelivery'] = self.on_demand_delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_notification (list)
        _items = []
        if self.shipment_notification:
            for _item in self.shipment_notification:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipmentNotification'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prepaid_charges (list)
        _items = []
        if self.prepaid_charges:
            for _item in self.prepaid_charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['prepaidCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of estimated_delivery_date
        if self.estimated_delivery_date:
            _dict['estimatedDeliveryDate'] = self.estimated_delivery_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in get_additional_information (list)
        _items = []
        if self.get_additional_information:
            for _item in self.get_additional_information:
                if _item:
                    _items.append(_item.to_dict())
            _dict['getAdditionalInformation'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent_shipment
        if self.parent_shipment:
            _dict['parentShipment'] = self.parent_shipment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plannedShippingDateAndTime": obj.get("plannedShippingDateAndTime"),
            "pickup": Pickup.from_dict(obj["pickup"]) if obj.get("pickup") is not None else None,
            "productCode": obj.get("productCode"),
            "localProductCode": obj.get("localProductCode"),
            "getRateEstimates": obj.get("getRateEstimates") if obj.get("getRateEstimates") is not None else False,
            "accounts": [SupermodelIoLogisticsExpressAccount.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "valueAddedServices": [SupermodelIoLogisticsExpressValueAddedServices.from_dict(_item) for _item in obj["valueAddedServices"]] if obj.get("valueAddedServices") is not None else None,
            "outputImageProperties": SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.from_dict(obj["outputImageProperties"]) if obj.get("outputImageProperties") is not None else None,
            "customerReferences": [SupermodelIoLogisticsExpressReference.from_dict(_item) for _item in obj["customerReferences"]] if obj.get("customerReferences") is not None else None,
            "identifiers": [SupermodelIoLogisticsExpressIdentifier.from_dict(_item) for _item in obj["identifiers"]] if obj.get("identifiers") is not None else None,
            "customerDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetails.from_dict(obj["customerDetails"]) if obj.get("customerDetails") is not None else None,
            "content": SupermodelIoLogisticsExpressCreateShipmentRequestContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "documentImages": [SupermodelIoLogisticsExpressDocumentImagesInner.from_dict(_item) for _item in obj["documentImages"]] if obj.get("documentImages") is not None else None,
            "onDemandDelivery": SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery.from_dict(obj["onDemandDelivery"]) if obj.get("onDemandDelivery") is not None else None,
            "requestOndemandDeliveryURL": obj.get("requestOndemandDeliveryURL"),
            "shipmentNotification": [SupermodelIoLogisticsExpressCreateShipmentRequestShipmentNotificationInner.from_dict(_item) for _item in obj["shipmentNotification"]] if obj.get("shipmentNotification") is not None else None,
            "prepaidCharges": [SupermodelIoLogisticsExpressCreateShipmentRequestPrepaidChargesInner.from_dict(_item) for _item in obj["prepaidCharges"]] if obj.get("prepaidCharges") is not None else None,
            "getTransliteratedResponse": obj.get("getTransliteratedResponse"),
            "estimatedDeliveryDate": EstimatedDeliveryDate.from_dict(obj["estimatedDeliveryDate"]) if obj.get("estimatedDeliveryDate") is not None else None,
            "getAdditionalInformation": [SupermodelIoLogisticsExpressCreateShipmentRequestGetAdditionalInformationInner.from_dict(_item) for _item in obj["getAdditionalInformation"]] if obj.get("getAdditionalInformation") is not None else None,
            "parentShipment": SupermodelIoLogisticsExpressCreateShipmentRequestParentShipment.from_dict(obj["parentShipment"]) if obj.get("parentShipment") is not None else None
        })
        return _obj


