# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details_broker_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsBrokerDetails
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details_buyer_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsBuyerDetails
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details_exporter_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsExporterDetails
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details_importer_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsImporterDetails
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details_payer_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsPayerDetails
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details_receiver_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsReceiverDetails
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details_seller_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsSellerDetails
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details_shipper_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsShipperDetails
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_customer_details_ultimate_consignee_details import SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsUltimateConsigneeDetails
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetails(BaseModel):
    """
    Here you need to define all the parties needed to ship the package
    """ # noqa: E501
    shipper_details: SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsShipperDetails = Field(alias="shipperDetails")
    receiver_details: SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsReceiverDetails = Field(alias="receiverDetails")
    buyer_details: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsBuyerDetails] = Field(default=None, alias="buyerDetails")
    importer_details: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsImporterDetails] = Field(default=None, alias="importerDetails")
    exporter_details: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsExporterDetails] = Field(default=None, alias="exporterDetails")
    seller_details: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsSellerDetails] = Field(default=None, alias="sellerDetails")
    payer_details: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsPayerDetails] = Field(default=None, alias="payerDetails")
    ultimate_consignee_details: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsUltimateConsigneeDetails] = Field(default=None, alias="ultimateConsigneeDetails")
    broker_details: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsBrokerDetails] = Field(default=None, alias="brokerDetails")
    __properties: ClassVar[List[str]] = ["shipperDetails", "receiverDetails", "buyerDetails", "importerDetails", "exporterDetails", "sellerDetails", "payerDetails", "ultimateConsigneeDetails", "brokerDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shipper_details
        if self.shipper_details:
            _dict['shipperDetails'] = self.shipper_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver_details
        if self.receiver_details:
            _dict['receiverDetails'] = self.receiver_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buyer_details
        if self.buyer_details:
            _dict['buyerDetails'] = self.buyer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of importer_details
        if self.importer_details:
            _dict['importerDetails'] = self.importer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exporter_details
        if self.exporter_details:
            _dict['exporterDetails'] = self.exporter_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seller_details
        if self.seller_details:
            _dict['sellerDetails'] = self.seller_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer_details
        if self.payer_details:
            _dict['payerDetails'] = self.payer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ultimate_consignee_details
        if self.ultimate_consignee_details:
            _dict['ultimateConsigneeDetails'] = self.ultimate_consignee_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broker_details
        if self.broker_details:
            _dict['brokerDetails'] = self.broker_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shipperDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsShipperDetails.from_dict(obj["shipperDetails"]) if obj.get("shipperDetails") is not None else None,
            "receiverDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsReceiverDetails.from_dict(obj["receiverDetails"]) if obj.get("receiverDetails") is not None else None,
            "buyerDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsBuyerDetails.from_dict(obj["buyerDetails"]) if obj.get("buyerDetails") is not None else None,
            "importerDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsImporterDetails.from_dict(obj["importerDetails"]) if obj.get("importerDetails") is not None else None,
            "exporterDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsExporterDetails.from_dict(obj["exporterDetails"]) if obj.get("exporterDetails") is not None else None,
            "sellerDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsSellerDetails.from_dict(obj["sellerDetails"]) if obj.get("sellerDetails") is not None else None,
            "payerDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsPayerDetails.from_dict(obj["payerDetails"]) if obj.get("payerDetails") is not None else None,
            "ultimateConsigneeDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsUltimateConsigneeDetails.from_dict(obj["ultimateConsigneeDetails"]) if obj.get("ultimateConsigneeDetails") is not None else None,
            "brokerDetails": SupermodelIoLogisticsExpressCreateShipmentRequestCustomerDetailsBrokerDetails.from_dict(obj["brokerDetails"]) if obj.get("brokerDetails") is not None else None
        })
        return _obj


