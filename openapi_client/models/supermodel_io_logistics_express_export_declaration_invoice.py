# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_export_declaration_invoice_customer_references_inner import SupermodelIoLogisticsExpressExportDeclarationInvoiceCustomerReferencesInner
from openapi_client.models.supermodel_io_logistics_express_export_declaration_invoice_indicative_customs_values import SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues
from openapi_client.models.supermodel_io_logistics_express_export_declaration_invoice_pre_calculated_total_values import SupermodelIoLogisticsExpressExportDeclarationInvoicePreCalculatedTotalValues
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressExportDeclarationInvoice(BaseModel):
    """
    Please provide invoice related information
    """ # noqa: E501
    number: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="Please enter commercial invoice number")
    var_date: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="Please enter commercial invoice date", alias="date")
    function: StrictStr = Field(description="Please provide the purpose was the document details captured and are planned to be used. Note: export and import is only applicable for approve Sale In Transit customers")
    customer_references: Optional[Annotated[List[SupermodelIoLogisticsExpressExportDeclarationInvoiceCustomerReferencesInner], Field(max_length=100)]] = Field(default=None, description="Please provide the customer references at invoice level.   Note: customerReference/0/value with typeCode 'CU' is mandatory if using POST method and no shipmentTrackingNumber is provided in request. It is recommended to provide less than 20 customer references of 'MRN' type code", alias="customerReferences")
    indicative_customs_values: Optional[SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues] = Field(default=None, alias="indicativeCustomsValues")
    pre_calculated_total_values: Optional[SupermodelIoLogisticsExpressExportDeclarationInvoicePreCalculatedTotalValues] = Field(default=None, alias="preCalculatedTotalValues")
    __properties: ClassVar[List[str]] = ["number", "date", "function", "customerReferences", "indicativeCustomsValues", "preCalculatedTotalValues"]

    @field_validator('var_date')
    def var_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/")
        return value

    @field_validator('function')
    def function_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['import', 'export', 'both']):
            raise ValueError("must be one of enum values ('import', 'export', 'both')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressExportDeclarationInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in customer_references (list)
        _items = []
        if self.customer_references:
            for _item in self.customer_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customerReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of indicative_customs_values
        if self.indicative_customs_values:
            _dict['indicativeCustomsValues'] = self.indicative_customs_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_calculated_total_values
        if self.pre_calculated_total_values:
            _dict['preCalculatedTotalValues'] = self.pre_calculated_total_values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressExportDeclarationInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "number": obj.get("number"),
            "date": obj.get("date"),
            "function": obj.get("function"),
            "customerReferences": [SupermodelIoLogisticsExpressExportDeclarationInvoiceCustomerReferencesInner.from_dict(_item) for _item in obj["customerReferences"]] if obj.get("customerReferences") is not None else None,
            "indicativeCustomsValues": SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.from_dict(obj["indicativeCustomsValues"]) if obj.get("indicativeCustomsValues") is not None else None,
            "preCalculatedTotalValues": SupermodelIoLogisticsExpressExportDeclarationInvoicePreCalculatedTotalValues.from_dict(obj["preCalculatedTotalValues"]) if obj.get("preCalculatedTotalValues") is not None else None
        })
        return _obj


