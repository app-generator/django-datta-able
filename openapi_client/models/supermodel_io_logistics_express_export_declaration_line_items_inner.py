# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration_line_items_inner_commodity_codes_inner import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInnerCommodityCodesInner
from openapi_client.models.supermodel_io_logistics_express_export_declaration_line_items_inner_customer_references_inner import SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomerReferencesInner
from openapi_client.models.supermodel_io_logistics_express_export_declaration_line_items_inner_customs_documents_inner import SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomsDocumentsInner
from openapi_client.models.supermodel_io_logistics_express_export_declaration_line_items_inner_quantity import SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity
from openapi_client.models.supermodel_io_logistics_express_export_declaration_line_items_inner_weight import SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerWeight
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressExportDeclarationLineItemsInner(BaseModel):
    """
    SupermodelIoLogisticsExpressExportDeclarationLineItemsInner
    """ # noqa: E501
    number: Annotated[int, Field(le=1000, strict=True, ge=1)] = Field(description="Please provide line item number")
    description: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Please provide description of the line item")
    price: Union[Annotated[float, Field(multiple_of=0.001, le=999999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(description="Please provide unit or article price line item value")
    quantity: SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity
    commodity_codes: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInnerCommodityCodesInner], Field(max_length=2)]] = Field(default=None, description="Please provide Commodity codes for the shipment at item line level", alias="commodityCodes")
    export_reason_type: Optional[StrictStr] = Field(default=None, description="Please provide the reason for export", alias="exportReasonType")
    manufacturer_country: Annotated[str, Field(min_length=2, strict=True, max_length=2)] = Field(description="Please enter two letter ISO manufacturer country code", alias="manufacturerCountry")
    weight: Optional[SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerWeight]
    is_taxes_paid: Optional[StrictBool] = Field(default=None, description="Please provide if the Taxes is paid for the line item", alias="isTaxesPaid")
    customer_references: Optional[Annotated[List[SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomerReferencesInner], Field(max_length=100)]] = Field(default=None, description="Please provide the Customer References for the line item", alias="customerReferences")
    customs_documents: Optional[Annotated[List[SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomsDocumentsInner], Field(max_length=50)]] = Field(default=None, description="Please provide the customs documents details", alias="customsDocuments")
    pre_calculated_line_item_total_value: Optional[Union[Annotated[float, Field(le=999999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="Please provide monetary value of the line item x quantity", alias="preCalculatedLineItemTotalValue")
    __properties: ClassVar[List[str]] = ["number", "description", "price", "quantity", "commodityCodes", "exportReasonType", "manufacturerCountry", "weight", "isTaxesPaid", "customerReferences", "customsDocuments", "preCalculatedLineItemTotalValue"]

    @field_validator('export_reason_type')
    def export_reason_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['permanent', 'temporary', 'return', 'used_exhibition_goods_to_origin', 'intercompany_use', 'commercial_purpose_or_sale', 'personal_belongings_or_personal_use', 'sample', 'gift', 'return_to_origin', 'warranty_replacement', 'diplomatic_goods', 'defence_material']):
            raise ValueError("must be one of enum values ('permanent', 'temporary', 'return', 'used_exhibition_goods_to_origin', 'intercompany_use', 'commercial_purpose_or_sale', 'personal_belongings_or_personal_use', 'sample', 'gift', 'return_to_origin', 'warranty_replacement', 'diplomatic_goods', 'defence_material')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressExportDeclarationLineItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of quantity
        if self.quantity:
            _dict['quantity'] = self.quantity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in commodity_codes (list)
        _items = []
        if self.commodity_codes:
            for _item in self.commodity_codes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['commodityCodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in customer_references (list)
        _items = []
        if self.customer_references:
            for _item in self.customer_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customerReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customs_documents (list)
        _items = []
        if self.customs_documents:
            for _item in self.customs_documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customsDocuments'] = _items
        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['weight'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressExportDeclarationLineItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "number": obj.get("number"),
            "description": obj.get("description"),
            "price": obj.get("price"),
            "quantity": SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity.from_dict(obj["quantity"]) if obj.get("quantity") is not None else None,
            "commodityCodes": [SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInnerCommodityCodesInner.from_dict(_item) for _item in obj["commodityCodes"]] if obj.get("commodityCodes") is not None else None,
            "exportReasonType": obj.get("exportReasonType"),
            "manufacturerCountry": obj.get("manufacturerCountry"),
            "weight": SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerWeight.from_dict(obj["weight"]) if obj.get("weight") is not None else None,
            "isTaxesPaid": obj.get("isTaxesPaid"),
            "customerReferences": [SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomerReferencesInner.from_dict(_item) for _item in obj["customerReferences"]] if obj.get("customerReferences") is not None else None,
            "customsDocuments": [SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomsDocumentsInner.from_dict(_item) for _item in obj["customsDocuments"]] if obj.get("customsDocuments") is not None else None,
            "preCalculatedLineItemTotalValue": obj.get("preCalculatedLineItemTotalValue")
        })
        return _obj


