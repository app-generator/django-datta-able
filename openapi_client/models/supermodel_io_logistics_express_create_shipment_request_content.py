# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_content_export_declaration import SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration
from openapi_client.models.supermodel_io_logistics_express_package import SupermodelIoLogisticsExpressPackage
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressCreateShipmentRequestContent(BaseModel):
    """
    Here you can define all the properties related to the content of the prospected shipment
    """ # noqa: E501
    packages: Annotated[List[SupermodelIoLogisticsExpressPackage], Field(min_length=1, max_length=999)] = Field(description="Here you can define properties per package")
    is_customs_declarable: StrictBool = Field(description="For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false).Note:If the shipment is dutiable, exportDeclaration element must be provided.", alias="isCustomsDeclarable")
    declared_value: Optional[Union[Annotated[float, Field(multiple_of=0.001, le=999999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="For customs purposes please advise on declared value of the shipment", alias="declaredValue")
    declared_value_currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="For customs purposes please advise on declared value currency code of the shipment", alias="declaredValueCurrency")
    export_declaration: Optional[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration] = Field(default=None, alias="exportDeclaration")
    description: Annotated[str, Field(min_length=1, strict=True, max_length=70)] = Field(description="Please enter description of your shipment")
    us_filing_type_value: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=20)]] = Field(default=None, description="This is used for the US AES4, FTR and ITN numbers to be printed on the Transport Label", alias="USFilingTypeValue")
    incoterm: StrictStr = Field(description="The Incoterms rules are a globally-recognized set of standards, used worldwide in international and domestic contracts for the delivery of goods, illustrating responsibilities between buyer and seller for costs and risk, as well as cargo insurance.<BR>          EXW ExWorks<BR>          FCA Free Carrier<BR>          CPT Carriage Paid To<BR>          CIP Carriage and Insurance Paid To<BR>          DPU Delivered at Place Unloaded<BR>          DAP Delivered at Place<BR>          DDP Delivered Duty Paid<BR>          FAS Free Alongside Ship<BR>          FOB Free on Board<BR>          CFR Cost and Freight<BR>          CIF Cost, Insurance and Freight<BR>          DAF Delivered at Frontier<BR>          DAT Delivered at Terminal<BR>          DDU Delivered Duty Unpaid<BR>          DEQ Delivery ex Quay<BR>          DES Delivered ex Ship")
    unit_of_measurement: StrictStr = Field(description="Please enter Unit of measurement - metric,imperial", alias="unitOfMeasurement")
    __properties: ClassVar[List[str]] = ["packages", "isCustomsDeclarable", "declaredValue", "declaredValueCurrency", "exportDeclaration", "description", "USFilingTypeValue", "incoterm", "unitOfMeasurement"]

    @field_validator('description')
    def description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^\s]", value):
            raise ValueError(r"must validate the regular expression /^[^\s]/")
        return value

    @field_validator('incoterm')
    def incoterm_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['EXW', 'FCA', 'CPT', 'CIP', 'DPU', 'DAP', 'DDP', 'FAS', 'FOB', 'CFR', 'CIF', 'DAF', 'DAT', 'DDU', 'DEQ', 'DES']):
            raise ValueError("must be one of enum values ('EXW', 'FCA', 'CPT', 'CIP', 'DPU', 'DAP', 'DDP', 'FAS', 'FOB', 'CFR', 'CIF', 'DAF', 'DAT', 'DDU', 'DEQ', 'DES')")
        return value

    @field_validator('unit_of_measurement')
    def unit_of_measurement_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['metric', 'imperial']):
            raise ValueError("must be one of enum values ('metric', 'imperial')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequestContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in packages (list)
        _items = []
        if self.packages:
            for _item in self.packages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['packages'] = _items
        # override the default output from pydantic by calling `to_dict()` of export_declaration
        if self.export_declaration:
            _dict['exportDeclaration'] = self.export_declaration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequestContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "packages": [SupermodelIoLogisticsExpressPackage.from_dict(_item) for _item in obj["packages"]] if obj.get("packages") is not None else None,
            "isCustomsDeclarable": obj.get("isCustomsDeclarable"),
            "declaredValue": obj.get("declaredValue"),
            "declaredValueCurrency": obj.get("declaredValueCurrency"),
            "exportDeclaration": SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration.from_dict(obj["exportDeclaration"]) if obj.get("exportDeclaration") is not None else None,
            "description": obj.get("description"),
            "USFilingTypeValue": obj.get("USFilingTypeValue"),
            "incoterm": obj.get("incoterm"),
            "unitOfMeasurement": obj.get("unitOfMeasurement")
        })
        return _obj


