# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.price_detail_inner import PriceDetailInner
from typing import Optional, Set
from typing_extensions import Self

class ProductsInner1DetailedPriceBreakdownInnerBreakdownInner(BaseModel):
    """
    ProductsInner1DetailedPriceBreakdownInnerBreakdownInner
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="When landed-cost is requested then following items name (Charge Types) might be returned: <BR>                        Charge Type : Description <BR>                        STDIS : Quoted shipment total discount <BR>                        SCUSV : Shipment Customs value <BR>                        SINSV : Insured value <BR>                        SPRQD : Shipment product quote discount<BR>                        SPRQN : The price quoted to the Customer by DHL at the time of the booking. This quote covers the weight price including discounts and without taxes. <BR>                        STSCH : The total of service charges quoted to customer for DHL Express value added services, the amount is after discounts and doesn't include tax amounts. <BR>                        MACHG : The total of service charges as provided by Merchant for the purpose of landed cost calculation. <BR>                        MFCHG : The freight charge as provided by Merchant for the purpose of landed cost calculation.")
    service_code: Optional[StrictStr] = Field(default=None, description="Special service or extra charge code. This is the code you would have to use in the /shipment service if you wish to add an optional Service such as Saturday delivery", alias="serviceCode")
    local_service_code: Optional[StrictStr] = Field(default=None, description="Local service code", alias="localServiceCode")
    type_code: Optional[StrictStr] = Field(default=None, description="Price breakdown type code", alias="typeCode")
    service_type_code: Optional[StrictStr] = Field(default=None, description="Special service charge code type for service.", alias="serviceTypeCode")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price breakdown value")
    price_currency: Optional[StrictStr] = Field(default=None, description="This the currency of the rated shipment for the prices listed.", alias="priceCurrency")
    is_customer_agreement: Optional[StrictBool] = Field(default=None, description="Customer agreement indicator for product and services, if service is offered with prior customer agreement", alias="isCustomerAgreement")
    is_marketed_service: Optional[StrictBool] = Field(default=None, description="Indicator if the special service is marketed service", alias="isMarketedService")
    is_billing_service_indicator: Optional[StrictBool] = Field(default=None, description="Indicator if there is any discount allowed", alias="isBillingServiceIndicator")
    price_breakdown: Optional[List[PriceDetailInner]] = Field(default=None, alias="priceBreakdown")
    tariff_rate_formula: Optional[StrictStr] = Field(default=None, description="Tariff Rate Formula on Shipment Level", alias="tariffRateFormula")
    __properties: ClassVar[List[str]] = ["name", "serviceCode", "localServiceCode", "typeCode", "serviceTypeCode", "price", "priceCurrency", "isCustomerAgreement", "isMarketedService", "isBillingServiceIndicator", "priceBreakdown", "tariffRateFormula"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductsInner1DetailedPriceBreakdownInnerBreakdownInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in price_breakdown (list)
        _items = []
        if self.price_breakdown:
            for _item in self.price_breakdown:
                if _item:
                    _items.append(_item.to_dict())
            _dict['priceBreakdown'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductsInner1DetailedPriceBreakdownInnerBreakdownInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "serviceCode": obj.get("serviceCode"),
            "localServiceCode": obj.get("localServiceCode"),
            "typeCode": obj.get("typeCode"),
            "serviceTypeCode": obj.get("serviceTypeCode"),
            "price": obj.get("price"),
            "priceCurrency": obj.get("priceCurrency"),
            "isCustomerAgreement": obj.get("isCustomerAgreement"),
            "isMarketedService": obj.get("isMarketedService"),
            "isBillingServiceIndicator": obj.get("isBillingServiceIndicator"),
            "priceBreakdown": [PriceDetailInner.from_dict(_item) for _item in obj["priceBreakdown"]] if obj.get("priceBreakdown") is not None else None,
            "tariffRateFormula": obj.get("tariffRateFormula")
        })
        return _obj


