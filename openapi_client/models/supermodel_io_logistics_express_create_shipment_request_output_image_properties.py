# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_output_image_properties_customer_barcodes_inner import SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerBarcodesInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_output_image_properties_customer_logos_inner import SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerLogosInner
from openapi_client.models.supermodel_io_logistics_express_create_shipment_request_output_image_properties_image_options_inner import SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner
from typing import Optional, Set
from typing_extensions import Self

class SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties(BaseModel):
    """
    Here you can modify label, waybillDoc, invoice and shipment receipt properties
    """ # noqa: E501
    printer_dpi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Printer DPI Resolution for X-axis and Y-axis (in DPI) for transport label and waybill document output", alias="printerDPI")
    customer_barcodes: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerBarcodesInner], Field(max_length=1)]] = Field(default=None, description="Customer barcodes to be printed on supported transport label templates", alias="customerBarcodes")
    customer_logos: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerLogosInner], Field(max_length=1)]] = Field(default=None, description="Customer Logo Image to be printed on transport label", alias="customerLogos")
    encoding_format: Optional[StrictStr] = Field(default='pdf', description="Please provide the format of the output documents. Note that invoice and shipment receipt will always come back as PDF", alias="encodingFormat")
    image_options: Optional[Annotated[List[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner], Field(max_length=20)]] = Field(default=None, description="Here the image options are defined for label, waybillDoc, invoice, QRcode and shipment receipt", alias="imageOptions")
    split_transport_and_waybill_doc_labels: Optional[StrictBool] = Field(default=None, description="When set to true it will generate a single PDF or thermal output file for the Transport Label, a single PDF or thermal output file for the Waybill document and a single PDF file consisting of Commercial Invoice and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.", alias="splitTransportAndWaybillDocLabels")
    all_documents_in_one_image: Optional[StrictBool] = Field(default=None, description="When set to true it will generate a single PDF or thermal output image file consists of Transport Label, Waybill Document, Shipment Receipt and Commercial Invoice.<BR>          The default value is false, where a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned.", alias="allDocumentsInOneImage")
    split_documents_by_pages: Optional[StrictBool] = Field(default=None, description="When set to true it will generate a single PDF or thermal output image file for each page for the Transport Label and single PDF or thermal output image file for Waybill Document will be returned in the create shipment response. The default value is false, a single PDF or thermal output image file for each page for Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.", alias="splitDocumentsByPages")
    split_invoice_and_receipt: Optional[StrictBool] = Field(default=None, description="When set to true it will generate a single PDF or thermal output image file consisting of Transport Label + Waybill Document, a single file consist of Commercial Invoice and a single file consist of Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned in create shipment response.", alias="splitInvoiceAndReceipt")
    receipt_and_labels_in_one_image: Optional[StrictBool] = Field(default=None, description="When set to true it will generate a single PDF file consisting of Transport Label, Waybill Document and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF file for Shipment Receipt will be returned in create shipment response.  Applicable only when #/outputImageProperties/imageOptions/0/typeCode is 'receipt' and #/outputImageProperties/encodingFormat is PDF.", alias="receiptAndLabelsInOneImage")
    __properties: ClassVar[List[str]] = ["printerDPI", "customerBarcodes", "customerLogos", "encodingFormat", "imageOptions", "splitTransportAndWaybillDocLabels", "allDocumentsInOneImage", "splitDocumentsByPages", "splitInvoiceAndReceipt", "receiptAndLabelsInOneImage"]

    @field_validator('printer_dpi')
    def printer_dpi_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([200, 300]):
            raise ValueError("must be one of enum values (200, 300)")
        return value

    @field_validator('encoding_format')
    def encoding_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pdf', 'zpl', 'lp2', 'epl']):
            raise ValueError("must be one of enum values ('pdf', 'zpl', 'lp2', 'epl')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in customer_barcodes (list)
        _items = []
        if self.customer_barcodes:
            for _item in self.customer_barcodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customerBarcodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customer_logos (list)
        _items = []
        if self.customer_logos:
            for _item in self.customer_logos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customerLogos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in image_options (list)
        _items = []
        if self.image_options:
            for _item in self.image_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['imageOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "printerDPI": obj.get("printerDPI"),
            "customerBarcodes": [SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerBarcodesInner.from_dict(_item) for _item in obj["customerBarcodes"]] if obj.get("customerBarcodes") is not None else None,
            "customerLogos": [SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerLogosInner.from_dict(_item) for _item in obj["customerLogos"]] if obj.get("customerLogos") is not None else None,
            "encodingFormat": obj.get("encodingFormat") if obj.get("encodingFormat") is not None else 'pdf',
            "imageOptions": [SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner.from_dict(_item) for _item in obj["imageOptions"]] if obj.get("imageOptions") is not None else None,
            "splitTransportAndWaybillDocLabels": obj.get("splitTransportAndWaybillDocLabels"),
            "allDocumentsInOneImage": obj.get("allDocumentsInOneImage"),
            "splitDocumentsByPages": obj.get("splitDocumentsByPages"),
            "splitInvoiceAndReceipt": obj.get("splitInvoiceAndReceipt"),
            "receiptAndLabelsInOneImage": obj.get("receiptAndLabelsInOneImage")
        })
        return _obj


