# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.service_points_rest_response_v3 import ServicePointsRestResponseV3

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ServicepointApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def exp_api_servicepoints(
        self,
        address: Annotated[Optional[StrictStr], Field(description="The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.")] = None,
        place_id: Annotated[Optional[StrictStr], Field(description="To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google")] = None,
        provider_id: Annotated[Optional[StrictStr], Field(description="To specify the providerId(provider) for the place ID")] = None,
        latitude: Annotated[Optional[StrictStr], Field(description="Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.")] = None,
        longitude: Annotated[Optional[StrictStr], Field(description="Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter")] = None,
        service_point_id: Annotated[Optional[StrictStr], Field(description="Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.     If address is used, id is not possible to use.")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode=DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) ")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) ")] = None,
        language_script_code: Annotated[Optional[StrictStr], Field(description="Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.")] = None,
        language_country_code: Annotated[Optional[StrictStr], Field(description="Language Country Code - can be used to differentiate between linguistic variants of the same Language.")] = None,
        service_point_results: Annotated[Optional[StrictStr], Field(description="Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. ")] = None,
        capability: Annotated[Optional[StrictStr], Field(description="Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations.    ")] = None,
        open_before: Annotated[Optional[StrictStr], Field(description="Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00")] = None,
        open_after: Annotated[Optional[StrictStr], Field(description="Service points open After given time e.g.:15:00 will find service points which are open after 15:00")] = None,
        open_day: Annotated[Optional[List[StrictStr]], Field(description="Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday ")] = None,
        weight: Annotated[Optional[StrictStr], Field(description="Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) ")] = None,
        weight_uom: Annotated[Optional[List[StrictStr]], Field(description="Weight units – kg or lb. Required if weight is passed in. ")] = None,
        length: Annotated[Optional[StrictStr], Field(description="Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)")] = None,
        width: Annotated[Optional[StrictStr], Field(description="Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) ")] = None,
        height: Annotated[Optional[StrictStr], Field(description="Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) ")] = None,
        dimensions_uom: Annotated[Optional[List[StrictStr]], Field(description="Dimension units – cm or in. Required with any of length, width or height parameter.")] = None,
        result_uom: Annotated[Optional[List[StrictStr]], Field(description="Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. ")] = None,
        service_area_code: Annotated[Optional[StrictStr], Field(description="Service Area Code of the search address")] = None,
        service_point_types: Annotated[Optional[List[StrictStr]], Field(description="Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated")] = None,
        max_distance: Annotated[Optional[StrictStr], Field(description="Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. ")] = None,
        piece_count_limit: Annotated[Optional[StrictStr], Field(description="Static number, max pieces which can be handled on the service point.")] = None,
        import_charges: Annotated[Optional[List[StrictStr]], Field(description="Y/N – indicator whether it is possible to pay import charges on service point. ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.")] = None,
        combine_parameters: Annotated[Optional[StrictStr], Field(description="Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&” stands for AND condition “()” splits multiple conditions.")] = None,
        edd: Annotated[Optional[StrictStr], Field(description="Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.")] = None,
        exclude_fully_booked: Annotated[Optional[List[StrictStr]], Field(description="Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. ")] = None,
        shipment_id: Annotated[Optional[StrictStr], Field(description="To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.")] = None,
        piece_id: Annotated[Optional[StrictStr], Field(description="Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.")] = None,
        shipment_origin_service_area_code: Annotated[Optional[StrictStr], Field(description="To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.")] = None,
        is_results_specific_capab_required: Annotated[Optional[List[StrictStr]], Field(description="This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. ")] = None,
        encrypt: Annotated[Optional[List[StrictStr]], Field(description="This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.      When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ==          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. ")] = None,
        b64: Annotated[Optional[List[StrictStr]], Field(description="This indicates whether the address parameter contains the base64 encoded value or not. ")] = None,
        svp_status: Annotated[Optional[List[StrictStr]], Field(description="ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request.   A = Service Available (Open)  S = Service Suspended (Temporarily closed)   U = Service Unavailable (Temporarily closed)   Y = Not Yet Open (Temporarily closed)   X = Closed (Temporarily closed)")] = None,
        message_reference: Annotated[Optional[Annotated[str, Field(min_length=28, strict=True, max_length=36)]], Field(description="Please provide message reference ")] = None,
        message_reference_date: Annotated[Optional[StrictStr], Field(description="Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2")] = None,
        plugin_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=20)]], Field(description="Please provide name of the plugin (applicable to 3PV only) ")] = None,
        plugin_version: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="Please provide version of the plugin (applicable to 3PV only) ")] = None,
        shipping_system_platform_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=20)]], Field(description="Please provide name of the shipping platform(applicable to 3PV only) ")] = None,
        shipping_system_platform_version: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="Please provide version of the shipping platform (applicable to 3PV only) ")] = None,
        webstore_platform_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=20)]], Field(description="Please provide name of the webstore platform (applicable to 3PV only) ")] = None,
        webstore_platform_version: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="Please provide version of the webstore platform (applicable to 3PV only) ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServicePointsRestResponseV3:
        """Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments

        Get service points based on the given input parameters

        :param address: The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.
        :type address: str
        :param place_id: To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google
        :type place_id: str
        :param provider_id: To specify the providerId(provider) for the place ID
        :type provider_id: str
        :param latitude: Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.
        :type latitude: str
        :param longitude: Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter
        :type longitude: str
        :param service_point_id: Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.     If address is used, id is not possible to use.
        :type service_point_id: str
        :param country_code: Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode=DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) 
        :type country_code: str
        :param language: Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) 
        :type language: str
        :param language_script_code: Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.
        :type language_script_code: str
        :param language_country_code: Language Country Code - can be used to differentiate between linguistic variants of the same Language.
        :type language_country_code: str
        :param service_point_results: Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. 
        :type service_point_results: str
        :param capability: Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations.    
        :type capability: str
        :param open_before: Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00
        :type open_before: str
        :param open_after: Service points open After given time e.g.:15:00 will find service points which are open after 15:00
        :type open_after: str
        :param open_day: Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday 
        :type open_day: List[str]
        :param weight: Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :type weight: str
        :param weight_uom: Weight units – kg or lb. Required if weight is passed in. 
        :type weight_uom: List[str]
        :param length: Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)
        :type length: str
        :param width: Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :type width: str
        :param height: Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :type height: str
        :param dimensions_uom: Dimension units – cm or in. Required with any of length, width or height parameter.
        :type dimensions_uom: List[str]
        :param result_uom: Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. 
        :type result_uom: List[str]
        :param service_area_code: Service Area Code of the search address
        :type service_area_code: str
        :param service_point_types: Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated
        :type service_point_types: List[str]
        :param max_distance: Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. 
        :type max_distance: str
        :param piece_count_limit: Static number, max pieces which can be handled on the service point.
        :type piece_count_limit: str
        :param import_charges: Y/N – indicator whether it is possible to pay import charges on service point. 
        :type import_charges: List[str]
        :param key: Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.
        :type key: str
        :param combine_parameters: Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&” stands for AND condition “()” splits multiple conditions.
        :type combine_parameters: str
        :param edd: Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.
        :type edd: str
        :param exclude_fully_booked: Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. 
        :type exclude_fully_booked: List[str]
        :param shipment_id: To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.
        :type shipment_id: str
        :param piece_id: Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.
        :type piece_id: str
        :param shipment_origin_service_area_code: To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.
        :type shipment_origin_service_area_code: str
        :param is_results_specific_capab_required: This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. 
        :type is_results_specific_capab_required: List[str]
        :param encrypt: This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.      When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ==          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. 
        :type encrypt: List[str]
        :param b64: This indicates whether the address parameter contains the base64 encoded value or not. 
        :type b64: List[str]
        :param svp_status: ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request.   A = Service Available (Open)  S = Service Suspended (Temporarily closed)   U = Service Unavailable (Temporarily closed)   Y = Not Yet Open (Temporarily closed)   X = Closed (Temporarily closed)
        :type svp_status: List[str]
        :param message_reference: Please provide message reference 
        :type message_reference: str
        :param message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :type message_reference_date: str
        :param plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :type plugin_name: str
        :param plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :type plugin_version: str
        :param shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :type shipping_system_platform_name: str
        :param shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :type shipping_system_platform_version: str
        :param webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :type webstore_platform_name: str
        :param webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :type webstore_platform_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._exp_api_servicepoints_serialize(
            address=address,
            place_id=place_id,
            provider_id=provider_id,
            latitude=latitude,
            longitude=longitude,
            service_point_id=service_point_id,
            country_code=country_code,
            language=language,
            language_script_code=language_script_code,
            language_country_code=language_country_code,
            service_point_results=service_point_results,
            capability=capability,
            open_before=open_before,
            open_after=open_after,
            open_day=open_day,
            weight=weight,
            weight_uom=weight_uom,
            length=length,
            width=width,
            height=height,
            dimensions_uom=dimensions_uom,
            result_uom=result_uom,
            service_area_code=service_area_code,
            service_point_types=service_point_types,
            max_distance=max_distance,
            piece_count_limit=piece_count_limit,
            import_charges=import_charges,
            key=key,
            combine_parameters=combine_parameters,
            edd=edd,
            exclude_fully_booked=exclude_fully_booked,
            shipment_id=shipment_id,
            piece_id=piece_id,
            shipment_origin_service_area_code=shipment_origin_service_area_code,
            is_results_specific_capab_required=is_results_specific_capab_required,
            encrypt=encrypt,
            b64=b64,
            svp_status=svp_status,
            message_reference=message_reference,
            message_reference_date=message_reference_date,
            plugin_name=plugin_name,
            plugin_version=plugin_version,
            shipping_system_platform_name=shipping_system_platform_name,
            shipping_system_platform_version=shipping_system_platform_version,
            webstore_platform_name=webstore_platform_name,
            webstore_platform_version=webstore_platform_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServicePointsRestResponseV3",
            '500': "ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def exp_api_servicepoints_with_http_info(
        self,
        address: Annotated[Optional[StrictStr], Field(description="The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.")] = None,
        place_id: Annotated[Optional[StrictStr], Field(description="To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google")] = None,
        provider_id: Annotated[Optional[StrictStr], Field(description="To specify the providerId(provider) for the place ID")] = None,
        latitude: Annotated[Optional[StrictStr], Field(description="Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.")] = None,
        longitude: Annotated[Optional[StrictStr], Field(description="Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter")] = None,
        service_point_id: Annotated[Optional[StrictStr], Field(description="Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.     If address is used, id is not possible to use.")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode=DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) ")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) ")] = None,
        language_script_code: Annotated[Optional[StrictStr], Field(description="Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.")] = None,
        language_country_code: Annotated[Optional[StrictStr], Field(description="Language Country Code - can be used to differentiate between linguistic variants of the same Language.")] = None,
        service_point_results: Annotated[Optional[StrictStr], Field(description="Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. ")] = None,
        capability: Annotated[Optional[StrictStr], Field(description="Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations.    ")] = None,
        open_before: Annotated[Optional[StrictStr], Field(description="Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00")] = None,
        open_after: Annotated[Optional[StrictStr], Field(description="Service points open After given time e.g.:15:00 will find service points which are open after 15:00")] = None,
        open_day: Annotated[Optional[List[StrictStr]], Field(description="Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday ")] = None,
        weight: Annotated[Optional[StrictStr], Field(description="Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) ")] = None,
        weight_uom: Annotated[Optional[List[StrictStr]], Field(description="Weight units – kg or lb. Required if weight is passed in. ")] = None,
        length: Annotated[Optional[StrictStr], Field(description="Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)")] = None,
        width: Annotated[Optional[StrictStr], Field(description="Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) ")] = None,
        height: Annotated[Optional[StrictStr], Field(description="Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) ")] = None,
        dimensions_uom: Annotated[Optional[List[StrictStr]], Field(description="Dimension units – cm or in. Required with any of length, width or height parameter.")] = None,
        result_uom: Annotated[Optional[List[StrictStr]], Field(description="Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. ")] = None,
        service_area_code: Annotated[Optional[StrictStr], Field(description="Service Area Code of the search address")] = None,
        service_point_types: Annotated[Optional[List[StrictStr]], Field(description="Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated")] = None,
        max_distance: Annotated[Optional[StrictStr], Field(description="Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. ")] = None,
        piece_count_limit: Annotated[Optional[StrictStr], Field(description="Static number, max pieces which can be handled on the service point.")] = None,
        import_charges: Annotated[Optional[List[StrictStr]], Field(description="Y/N – indicator whether it is possible to pay import charges on service point. ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.")] = None,
        combine_parameters: Annotated[Optional[StrictStr], Field(description="Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&” stands for AND condition “()” splits multiple conditions.")] = None,
        edd: Annotated[Optional[StrictStr], Field(description="Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.")] = None,
        exclude_fully_booked: Annotated[Optional[List[StrictStr]], Field(description="Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. ")] = None,
        shipment_id: Annotated[Optional[StrictStr], Field(description="To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.")] = None,
        piece_id: Annotated[Optional[StrictStr], Field(description="Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.")] = None,
        shipment_origin_service_area_code: Annotated[Optional[StrictStr], Field(description="To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.")] = None,
        is_results_specific_capab_required: Annotated[Optional[List[StrictStr]], Field(description="This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. ")] = None,
        encrypt: Annotated[Optional[List[StrictStr]], Field(description="This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.      When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ==          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. ")] = None,
        b64: Annotated[Optional[List[StrictStr]], Field(description="This indicates whether the address parameter contains the base64 encoded value or not. ")] = None,
        svp_status: Annotated[Optional[List[StrictStr]], Field(description="ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request.   A = Service Available (Open)  S = Service Suspended (Temporarily closed)   U = Service Unavailable (Temporarily closed)   Y = Not Yet Open (Temporarily closed)   X = Closed (Temporarily closed)")] = None,
        message_reference: Annotated[Optional[Annotated[str, Field(min_length=28, strict=True, max_length=36)]], Field(description="Please provide message reference ")] = None,
        message_reference_date: Annotated[Optional[StrictStr], Field(description="Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2")] = None,
        plugin_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=20)]], Field(description="Please provide name of the plugin (applicable to 3PV only) ")] = None,
        plugin_version: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="Please provide version of the plugin (applicable to 3PV only) ")] = None,
        shipping_system_platform_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=20)]], Field(description="Please provide name of the shipping platform(applicable to 3PV only) ")] = None,
        shipping_system_platform_version: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="Please provide version of the shipping platform (applicable to 3PV only) ")] = None,
        webstore_platform_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=20)]], Field(description="Please provide name of the webstore platform (applicable to 3PV only) ")] = None,
        webstore_platform_version: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="Please provide version of the webstore platform (applicable to 3PV only) ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServicePointsRestResponseV3]:
        """Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments

        Get service points based on the given input parameters

        :param address: The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.
        :type address: str
        :param place_id: To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google
        :type place_id: str
        :param provider_id: To specify the providerId(provider) for the place ID
        :type provider_id: str
        :param latitude: Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.
        :type latitude: str
        :param longitude: Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter
        :type longitude: str
        :param service_point_id: Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.     If address is used, id is not possible to use.
        :type service_point_id: str
        :param country_code: Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode=DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) 
        :type country_code: str
        :param language: Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) 
        :type language: str
        :param language_script_code: Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.
        :type language_script_code: str
        :param language_country_code: Language Country Code - can be used to differentiate between linguistic variants of the same Language.
        :type language_country_code: str
        :param service_point_results: Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. 
        :type service_point_results: str
        :param capability: Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations.    
        :type capability: str
        :param open_before: Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00
        :type open_before: str
        :param open_after: Service points open After given time e.g.:15:00 will find service points which are open after 15:00
        :type open_after: str
        :param open_day: Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday 
        :type open_day: List[str]
        :param weight: Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :type weight: str
        :param weight_uom: Weight units – kg or lb. Required if weight is passed in. 
        :type weight_uom: List[str]
        :param length: Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)
        :type length: str
        :param width: Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :type width: str
        :param height: Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :type height: str
        :param dimensions_uom: Dimension units – cm or in. Required with any of length, width or height parameter.
        :type dimensions_uom: List[str]
        :param result_uom: Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. 
        :type result_uom: List[str]
        :param service_area_code: Service Area Code of the search address
        :type service_area_code: str
        :param service_point_types: Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated
        :type service_point_types: List[str]
        :param max_distance: Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. 
        :type max_distance: str
        :param piece_count_limit: Static number, max pieces which can be handled on the service point.
        :type piece_count_limit: str
        :param import_charges: Y/N – indicator whether it is possible to pay import charges on service point. 
        :type import_charges: List[str]
        :param key: Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.
        :type key: str
        :param combine_parameters: Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&” stands for AND condition “()” splits multiple conditions.
        :type combine_parameters: str
        :param edd: Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.
        :type edd: str
        :param exclude_fully_booked: Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. 
        :type exclude_fully_booked: List[str]
        :param shipment_id: To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.
        :type shipment_id: str
        :param piece_id: Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.
        :type piece_id: str
        :param shipment_origin_service_area_code: To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.
        :type shipment_origin_service_area_code: str
        :param is_results_specific_capab_required: This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. 
        :type is_results_specific_capab_required: List[str]
        :param encrypt: This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.      When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ==          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. 
        :type encrypt: List[str]
        :param b64: This indicates whether the address parameter contains the base64 encoded value or not. 
        :type b64: List[str]
        :param svp_status: ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request.   A = Service Available (Open)  S = Service Suspended (Temporarily closed)   U = Service Unavailable (Temporarily closed)   Y = Not Yet Open (Temporarily closed)   X = Closed (Temporarily closed)
        :type svp_status: List[str]
        :param message_reference: Please provide message reference 
        :type message_reference: str
        :param message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :type message_reference_date: str
        :param plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :type plugin_name: str
        :param plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :type plugin_version: str
        :param shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :type shipping_system_platform_name: str
        :param shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :type shipping_system_platform_version: str
        :param webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :type webstore_platform_name: str
        :param webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :type webstore_platform_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._exp_api_servicepoints_serialize(
            address=address,
            place_id=place_id,
            provider_id=provider_id,
            latitude=latitude,
            longitude=longitude,
            service_point_id=service_point_id,
            country_code=country_code,
            language=language,
            language_script_code=language_script_code,
            language_country_code=language_country_code,
            service_point_results=service_point_results,
            capability=capability,
            open_before=open_before,
            open_after=open_after,
            open_day=open_day,
            weight=weight,
            weight_uom=weight_uom,
            length=length,
            width=width,
            height=height,
            dimensions_uom=dimensions_uom,
            result_uom=result_uom,
            service_area_code=service_area_code,
            service_point_types=service_point_types,
            max_distance=max_distance,
            piece_count_limit=piece_count_limit,
            import_charges=import_charges,
            key=key,
            combine_parameters=combine_parameters,
            edd=edd,
            exclude_fully_booked=exclude_fully_booked,
            shipment_id=shipment_id,
            piece_id=piece_id,
            shipment_origin_service_area_code=shipment_origin_service_area_code,
            is_results_specific_capab_required=is_results_specific_capab_required,
            encrypt=encrypt,
            b64=b64,
            svp_status=svp_status,
            message_reference=message_reference,
            message_reference_date=message_reference_date,
            plugin_name=plugin_name,
            plugin_version=plugin_version,
            shipping_system_platform_name=shipping_system_platform_name,
            shipping_system_platform_version=shipping_system_platform_version,
            webstore_platform_name=webstore_platform_name,
            webstore_platform_version=webstore_platform_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServicePointsRestResponseV3",
            '500': "ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def exp_api_servicepoints_without_preload_content(
        self,
        address: Annotated[Optional[StrictStr], Field(description="The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.")] = None,
        place_id: Annotated[Optional[StrictStr], Field(description="To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google")] = None,
        provider_id: Annotated[Optional[StrictStr], Field(description="To specify the providerId(provider) for the place ID")] = None,
        latitude: Annotated[Optional[StrictStr], Field(description="Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.")] = None,
        longitude: Annotated[Optional[StrictStr], Field(description="Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter")] = None,
        service_point_id: Annotated[Optional[StrictStr], Field(description="Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.     If address is used, id is not possible to use.")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode=DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) ")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) ")] = None,
        language_script_code: Annotated[Optional[StrictStr], Field(description="Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.")] = None,
        language_country_code: Annotated[Optional[StrictStr], Field(description="Language Country Code - can be used to differentiate between linguistic variants of the same Language.")] = None,
        service_point_results: Annotated[Optional[StrictStr], Field(description="Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. ")] = None,
        capability: Annotated[Optional[StrictStr], Field(description="Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations.    ")] = None,
        open_before: Annotated[Optional[StrictStr], Field(description="Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00")] = None,
        open_after: Annotated[Optional[StrictStr], Field(description="Service points open After given time e.g.:15:00 will find service points which are open after 15:00")] = None,
        open_day: Annotated[Optional[List[StrictStr]], Field(description="Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday ")] = None,
        weight: Annotated[Optional[StrictStr], Field(description="Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) ")] = None,
        weight_uom: Annotated[Optional[List[StrictStr]], Field(description="Weight units – kg or lb. Required if weight is passed in. ")] = None,
        length: Annotated[Optional[StrictStr], Field(description="Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)")] = None,
        width: Annotated[Optional[StrictStr], Field(description="Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) ")] = None,
        height: Annotated[Optional[StrictStr], Field(description="Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) ")] = None,
        dimensions_uom: Annotated[Optional[List[StrictStr]], Field(description="Dimension units – cm or in. Required with any of length, width or height parameter.")] = None,
        result_uom: Annotated[Optional[List[StrictStr]], Field(description="Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. ")] = None,
        service_area_code: Annotated[Optional[StrictStr], Field(description="Service Area Code of the search address")] = None,
        service_point_types: Annotated[Optional[List[StrictStr]], Field(description="Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated")] = None,
        max_distance: Annotated[Optional[StrictStr], Field(description="Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. ")] = None,
        piece_count_limit: Annotated[Optional[StrictStr], Field(description="Static number, max pieces which can be handled on the service point.")] = None,
        import_charges: Annotated[Optional[List[StrictStr]], Field(description="Y/N – indicator whether it is possible to pay import charges on service point. ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.")] = None,
        combine_parameters: Annotated[Optional[StrictStr], Field(description="Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&” stands for AND condition “()” splits multiple conditions.")] = None,
        edd: Annotated[Optional[StrictStr], Field(description="Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.")] = None,
        exclude_fully_booked: Annotated[Optional[List[StrictStr]], Field(description="Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. ")] = None,
        shipment_id: Annotated[Optional[StrictStr], Field(description="To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.")] = None,
        piece_id: Annotated[Optional[StrictStr], Field(description="Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.")] = None,
        shipment_origin_service_area_code: Annotated[Optional[StrictStr], Field(description="To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.")] = None,
        is_results_specific_capab_required: Annotated[Optional[List[StrictStr]], Field(description="This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. ")] = None,
        encrypt: Annotated[Optional[List[StrictStr]], Field(description="This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.      When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ==          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. ")] = None,
        b64: Annotated[Optional[List[StrictStr]], Field(description="This indicates whether the address parameter contains the base64 encoded value or not. ")] = None,
        svp_status: Annotated[Optional[List[StrictStr]], Field(description="ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request.   A = Service Available (Open)  S = Service Suspended (Temporarily closed)   U = Service Unavailable (Temporarily closed)   Y = Not Yet Open (Temporarily closed)   X = Closed (Temporarily closed)")] = None,
        message_reference: Annotated[Optional[Annotated[str, Field(min_length=28, strict=True, max_length=36)]], Field(description="Please provide message reference ")] = None,
        message_reference_date: Annotated[Optional[StrictStr], Field(description="Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2")] = None,
        plugin_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=20)]], Field(description="Please provide name of the plugin (applicable to 3PV only) ")] = None,
        plugin_version: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="Please provide version of the plugin (applicable to 3PV only) ")] = None,
        shipping_system_platform_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=20)]], Field(description="Please provide name of the shipping platform(applicable to 3PV only) ")] = None,
        shipping_system_platform_version: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="Please provide version of the shipping platform (applicable to 3PV only) ")] = None,
        webstore_platform_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=20)]], Field(description="Please provide name of the webstore platform (applicable to 3PV only) ")] = None,
        webstore_platform_version: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="Please provide version of the webstore platform (applicable to 3PV only) ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments

        Get service points based on the given input parameters

        :param address: The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.
        :type address: str
        :param place_id: To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google
        :type place_id: str
        :param provider_id: To specify the providerId(provider) for the place ID
        :type provider_id: str
        :param latitude: Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.
        :type latitude: str
        :param longitude: Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter
        :type longitude: str
        :param service_point_id: Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.     If address is used, id is not possible to use.
        :type service_point_id: str
        :param country_code: Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode=DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) 
        :type country_code: str
        :param language: Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) 
        :type language: str
        :param language_script_code: Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.
        :type language_script_code: str
        :param language_country_code: Language Country Code - can be used to differentiate between linguistic variants of the same Language.
        :type language_country_code: str
        :param service_point_results: Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. 
        :type service_point_results: str
        :param capability: Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations.    
        :type capability: str
        :param open_before: Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00
        :type open_before: str
        :param open_after: Service points open After given time e.g.:15:00 will find service points which are open after 15:00
        :type open_after: str
        :param open_day: Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday 
        :type open_day: List[str]
        :param weight: Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :type weight: str
        :param weight_uom: Weight units – kg or lb. Required if weight is passed in. 
        :type weight_uom: List[str]
        :param length: Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)
        :type length: str
        :param width: Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :type width: str
        :param height: Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :type height: str
        :param dimensions_uom: Dimension units – cm or in. Required with any of length, width or height parameter.
        :type dimensions_uom: List[str]
        :param result_uom: Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. 
        :type result_uom: List[str]
        :param service_area_code: Service Area Code of the search address
        :type service_area_code: str
        :param service_point_types: Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated
        :type service_point_types: List[str]
        :param max_distance: Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. 
        :type max_distance: str
        :param piece_count_limit: Static number, max pieces which can be handled on the service point.
        :type piece_count_limit: str
        :param import_charges: Y/N – indicator whether it is possible to pay import charges on service point. 
        :type import_charges: List[str]
        :param key: Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.
        :type key: str
        :param combine_parameters: Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&” stands for AND condition “()” splits multiple conditions.
        :type combine_parameters: str
        :param edd: Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.
        :type edd: str
        :param exclude_fully_booked: Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. 
        :type exclude_fully_booked: List[str]
        :param shipment_id: To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.
        :type shipment_id: str
        :param piece_id: Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.
        :type piece_id: str
        :param shipment_origin_service_area_code: To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.
        :type shipment_origin_service_area_code: str
        :param is_results_specific_capab_required: This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. 
        :type is_results_specific_capab_required: List[str]
        :param encrypt: This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.      When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ==          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. 
        :type encrypt: List[str]
        :param b64: This indicates whether the address parameter contains the base64 encoded value or not. 
        :type b64: List[str]
        :param svp_status: ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request.   A = Service Available (Open)  S = Service Suspended (Temporarily closed)   U = Service Unavailable (Temporarily closed)   Y = Not Yet Open (Temporarily closed)   X = Closed (Temporarily closed)
        :type svp_status: List[str]
        :param message_reference: Please provide message reference 
        :type message_reference: str
        :param message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :type message_reference_date: str
        :param plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :type plugin_name: str
        :param plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :type plugin_version: str
        :param shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :type shipping_system_platform_name: str
        :param shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :type shipping_system_platform_version: str
        :param webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :type webstore_platform_name: str
        :param webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :type webstore_platform_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._exp_api_servicepoints_serialize(
            address=address,
            place_id=place_id,
            provider_id=provider_id,
            latitude=latitude,
            longitude=longitude,
            service_point_id=service_point_id,
            country_code=country_code,
            language=language,
            language_script_code=language_script_code,
            language_country_code=language_country_code,
            service_point_results=service_point_results,
            capability=capability,
            open_before=open_before,
            open_after=open_after,
            open_day=open_day,
            weight=weight,
            weight_uom=weight_uom,
            length=length,
            width=width,
            height=height,
            dimensions_uom=dimensions_uom,
            result_uom=result_uom,
            service_area_code=service_area_code,
            service_point_types=service_point_types,
            max_distance=max_distance,
            piece_count_limit=piece_count_limit,
            import_charges=import_charges,
            key=key,
            combine_parameters=combine_parameters,
            edd=edd,
            exclude_fully_booked=exclude_fully_booked,
            shipment_id=shipment_id,
            piece_id=piece_id,
            shipment_origin_service_area_code=shipment_origin_service_area_code,
            is_results_specific_capab_required=is_results_specific_capab_required,
            encrypt=encrypt,
            b64=b64,
            svp_status=svp_status,
            message_reference=message_reference,
            message_reference_date=message_reference_date,
            plugin_name=plugin_name,
            plugin_version=plugin_version,
            shipping_system_platform_name=shipping_system_platform_name,
            shipping_system_platform_version=shipping_system_platform_version,
            webstore_platform_name=webstore_platform_name,
            webstore_platform_version=webstore_platform_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServicePointsRestResponseV3",
            '500': "ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _exp_api_servicepoints_serialize(
        self,
        address,
        place_id,
        provider_id,
        latitude,
        longitude,
        service_point_id,
        country_code,
        language,
        language_script_code,
        language_country_code,
        service_point_results,
        capability,
        open_before,
        open_after,
        open_day,
        weight,
        weight_uom,
        length,
        width,
        height,
        dimensions_uom,
        result_uom,
        service_area_code,
        service_point_types,
        max_distance,
        piece_count_limit,
        import_charges,
        key,
        combine_parameters,
        edd,
        exclude_fully_booked,
        shipment_id,
        piece_id,
        shipment_origin_service_area_code,
        is_results_specific_capab_required,
        encrypt,
        b64,
        svp_status,
        message_reference,
        message_reference_date,
        plugin_name,
        plugin_version,
        shipping_system_platform_name,
        shipping_system_platform_version,
        webstore_platform_name,
        webstore_platform_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'openDay': 'multi',
            'weightUom': 'multi',
            'dimensionsUom': 'multi',
            'resultUom': 'multi',
            'servicePointTypes': 'multi',
            'importCharges': 'multi',
            'excludeFullyBooked': 'multi',
            'isResultsSpecificCapabRequired': 'multi',
            'encrypt': 'multi',
            'b64': 'multi',
            'svpStatus': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if address is not None:
            
            _query_params.append(('address', address))
            
        if place_id is not None:
            
            _query_params.append(('placeId', place_id))
            
        if provider_id is not None:
            
            _query_params.append(('providerId', provider_id))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if service_point_id is not None:
            
            _query_params.append(('servicePointID', service_point_id))
            
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if language_script_code is not None:
            
            _query_params.append(('languageScriptCode', language_script_code))
            
        if language_country_code is not None:
            
            _query_params.append(('languageCountryCode', language_country_code))
            
        if service_point_results is not None:
            
            _query_params.append(('servicePointResults', service_point_results))
            
        if capability is not None:
            
            _query_params.append(('capability', capability))
            
        if open_before is not None:
            
            _query_params.append(('openBefore', open_before))
            
        if open_after is not None:
            
            _query_params.append(('openAfter', open_after))
            
        if open_day is not None:
            
            _query_params.append(('openDay', open_day))
            
        if weight is not None:
            
            _query_params.append(('weight', weight))
            
        if weight_uom is not None:
            
            _query_params.append(('weightUom', weight_uom))
            
        if length is not None:
            
            _query_params.append(('length', length))
            
        if width is not None:
            
            _query_params.append(('width', width))
            
        if height is not None:
            
            _query_params.append(('height', height))
            
        if dimensions_uom is not None:
            
            _query_params.append(('dimensionsUom', dimensions_uom))
            
        if result_uom is not None:
            
            _query_params.append(('resultUom', result_uom))
            
        if service_area_code is not None:
            
            _query_params.append(('serviceAreaCode', service_area_code))
            
        if service_point_types is not None:
            
            _query_params.append(('servicePointTypes', service_point_types))
            
        if max_distance is not None:
            
            _query_params.append(('maxDistance', max_distance))
            
        if piece_count_limit is not None:
            
            _query_params.append(('pieceCountLimit', piece_count_limit))
            
        if import_charges is not None:
            
            _query_params.append(('importCharges', import_charges))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if combine_parameters is not None:
            
            _query_params.append(('combineParameters', combine_parameters))
            
        if edd is not None:
            
            _query_params.append(('edd', edd))
            
        if exclude_fully_booked is not None:
            
            _query_params.append(('excludeFullyBooked', exclude_fully_booked))
            
        if shipment_id is not None:
            
            _query_params.append(('shipmentID', shipment_id))
            
        if piece_id is not None:
            
            _query_params.append(('pieceID', piece_id))
            
        if shipment_origin_service_area_code is not None:
            
            _query_params.append(('shipmentOriginServiceAreaCode', shipment_origin_service_area_code))
            
        if is_results_specific_capab_required is not None:
            
            _query_params.append(('isResultsSpecificCapabRequired', is_results_specific_capab_required))
            
        if encrypt is not None:
            
            _query_params.append(('encrypt', encrypt))
            
        if b64 is not None:
            
            _query_params.append(('b64', b64))
            
        if svp_status is not None:
            
            _query_params.append(('svpStatus', svp_status))
            
        # process the header parameters
        if message_reference is not None:
            _header_params['Message-Reference'] = message_reference
        if message_reference_date is not None:
            _header_params['Message-Reference-Date'] = message_reference_date
        if plugin_name is not None:
            _header_params['Plugin-Name'] = plugin_name
        if plugin_version is not None:
            _header_params['Plugin-Version'] = plugin_version
        if shipping_system_platform_name is not None:
            _header_params['Shipping-System-Platform-Name'] = shipping_system_platform_name
        if shipping_system_platform_version is not None:
            _header_params['Shipping-System-Platform-Version'] = shipping_system_platform_version
        if webstore_platform_name is not None:
            _header_params['Webstore-Platform-Name'] = webstore_platform_name
        if webstore_platform_version is not None:
            _header_params['Webstore-Platform-Version'] = webstore_platform_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/servicepoints',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


