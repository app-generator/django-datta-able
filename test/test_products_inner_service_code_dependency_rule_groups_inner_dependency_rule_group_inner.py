# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments) 

    The version of the OpenAPI document: 2.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.products_inner_service_code_dependency_rule_groups_inner_dependency_rule_group_inner import ProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner

class TestProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner(unittest.TestCase):
    """ProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner:
        """Test ProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner`
        """
        model = ProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner()
        if include_optional:
            return ProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner(
                dependency_rule_name = 'Labelfree and PLT rule',
                dependency_description = 'Labelfree requires Paperless Trade (PLT) only if PLT is allowed for product globaly',
                dependency_condition = 'Must provide the requiredServiceCode if it is allowed for the productCode',
                required_service_codes = [
                    openapi_client.models.products_inner_service_code_dependency_rule_groups_inner_dependency_rule_group_inner_required_service_codes_inner.products_inner_serviceCodeDependencyRuleGroups_inner_dependencyRuleGroup_inner_requiredServiceCodes_inner(
                        service_code = 'WY', )
                    ]
            )
        else:
            return ProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner(
        )
        """

    def testProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner(self):
        """Test ProductsInnerServiceCodeDependencyRuleGroupsInnerDependencyRuleGroupInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
